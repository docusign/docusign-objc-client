#import <Foundation/Foundation.h>
#import "DSAccountInformation.h"
#import "DSAccountSettingsInformation.h"
#import "DSAccountSharedAccess.h"
#import "DSAccountSignatureProviders.h"
#import "DSBillingChargeResponse.h"
#import "DSBrand.h"
#import "DSBrandResources.h"
#import "DSBrandResourcesList.h"
#import "DSBrandsRequest.h"
#import "DSBrandsResponse.h"
#import "DSCaptiveRecipientInformation.h"
#import "DSConsumerDisclosure.h"
#import "DSCustomFields.h"
#import "DSENoteConfiguration.h"
#import "DSErrorDetails.h"
#import "DSFileTypeList.h"
#import "DSNewAccountDefinition.h"
#import "DSNewAccountSummary.h"
#import "DSPermissionProfile.h"
#import "DSPermissionProfileInformation.h"
#import "DSPostTransactionsRequest.h"
#import "DSPostTransactionsResponse.h"
#import "DSProvisioningInformation.h"
#import "DSRecipientNamesResponse.h"
#import "DSTabAccountSettings.h"
#import "DSApi.h"

/**
* DocuSign REST API
* The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
*
* OpenAPI spec version: v2
* Contact: devcenter@docusign.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/





@interface DSAccountsApi_CreateOptions : DSObject
/*
 * previewBillingPlan When set to **true**, creates the account using a preview billing plan.
 */
@property NSString* previewBillingPlan;

@end





@interface DSAccountsApi_CreatePermissionProfileOptions : DSObject
/*
 * include 
 */
@property NSString* include;

@end










@interface DSAccountsApi_GetAccountInformationOptions : DSObject
/*
 * includeAccountSettings When set to **true**, includes the account settings for the account in the response.
 */
@property NSString* includeAccountSettings;

@end




@interface DSAccountsApi_GetBillingChargesOptions : DSObject
/*
 * includeCharges Specifies which billing charges to return. Valid values are:  * envelopes * seats 
 */
@property NSString* includeCharges;

@end



@interface DSAccountsApi_GetBrandOptions : DSObject
/*
 * includeExternalReferences 
 */
@property NSString* includeExternalReferences;
/*
 * includeLogos 
 */
@property NSString* includeLogos;

@end





@interface DSAccountsApi_GetBrandResourcesByContentTypeOptions : DSObject
/*
 * langcode 
 */
@property NSString* langcode;
/*
 * returnMaster 
 */
@property NSString* returnMaster;

@end




@interface DSAccountsApi_GetConsumerDisclosureDefaultOptions : DSObject
/*
 * langCode Specifies the language used in the response. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Bahasa Indonesia (id), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Bahasa Melayu (ms), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro), Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk), and Vietnamese (vi).  Additionally, the value can be set to &#x60;browser&#x60; to automatically detect the browser language being used by the viewer and display the disclosure in that language. 
 */
@property NSString* langCode;

@end




@interface DSAccountsApi_GetPermissionProfileOptions : DSObject
/*
 * include 
 */
@property NSString* include;

@end




@interface DSAccountsApi_ListBrandsOptions : DSObject
/*
 * excludeDistributorBrand When set to **true**, excludes distributor brand information from the response set.
 */
@property NSString* excludeDistributorBrand;
/*
 * includeLogos When set to **true**, returns the logos associated with the brand.
 */
@property NSString* includeLogos;

@end




@interface DSAccountsApi_ListPermissionsOptions : DSObject
/*
 * include 
 */
@property NSString* include;

@end



@interface DSAccountsApi_ListRecipientNamesByEmailOptions : DSObject
/*
 * email The email address for the user
 */
@property NSString* email;

@end




@interface DSAccountsApi_ListSharedAccessOptions : DSObject
/*
 * count Specifies maximum number of results included in the response. If no value is specified, this defaults to 1000.
 */
@property NSString* count;
/*
 * envelopesNotSharedUserStatus 
 */
@property NSString* envelopesNotSharedUserStatus;
/*
 * folderIds 
 */
@property NSString* folderIds;
/*
 * itemType Specifies the type of shared item being requested. The accepted values are: -envelopes: returns information about envelope sharing between users.
 */
@property NSString* itemType;
/*
 * searchText This can be used to filter user names in the response. The wild-card ‘*’ (asterisk) can be used around the string.
 */
@property NSString* searchText;
/*
 * shared Specifies which users should be included in the response. Multiple values can be used in the query by using a comma separated list of shared values. If the requestor does not have account administrator privileges, the shared_to value is used. Requestors that do not have account administrator privileges can only use the shared_to, any other setting will result in an error. The accepted values are:  -not_shared: Returns account users that the specified item type is not being shared with and that are not sharing the specified item type with the user.  User X (Share) X Account user  -shared_to: Returns account users that the specified item type is not being shared with and who are sharing the specified item type with the user (only shared to the user).  User X (Share) Account user  -shared_from: Returns account users that the specified item type is being shared with and who are not sharing the specified item type with the user (only shared from the user).  User (Share) &gt;&gt; Account user  -shared_to_and_from: Returns account users that the specified item type is being shared with and who are sharing the specified item type with the user.  User &lt;&lt; (Share) &gt;&gt; Account user
 */
@property NSString* shared;
/*
 * startPosition If the response set exceeds Count, this can be used to specify that the method should return users starting at the specified index. The first index is 0, and should be used in the first GET call. Typically this number is a multiple of Count. If no value is specified, this defaults to be 0. 
 */
@property NSString* startPosition;
/*
 * userIds A comma separated list of userIds for whom the shared item information is being requested. 
 */
@property NSString* userIds;

@end










@interface DSAccountsApi_UpdatePermissionProfileOptions : DSObject
/*
 * include 
 */
@property NSString* include;

@end




@interface DSAccountsApi_UpdateSharedAccessOptions : DSObject
/*
 * itemType 
 */
@property NSString* itemType;
/*
 * userIds 
 */
@property NSString* userIds;

@end


@interface DSAccountsApi: NSObject <DSApi>

extern NSString* kDSAccountsApiErrorDomain;
extern NSInteger kDSAccountsApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Creates new accounts.
/// Creates new DocuSign service accounts.  This is used to create multiple DocuSign accounts with one call. It uses the same information and formats as the normal a  [Accounts:create](accounts_create) call with the information included within a `newAccountRequests` element. A maximum of 100 new accounts can be created at one time.  Note that the structure of the XML request is slightly different than the JSON request, in that the new account information is included in a `newAccountDefinition` property inside the `newAccountRequests` element. Response  The response returns the new account ID, password and the default user information for each newly created account.  A 201 code is returned if the call succeeded.  While the call may have succeed, some of the individual account requests may have failed. In the case of failures to create the account,  an `errorDetails` node is added in the response to each specific request that failed.
///

/// @param varNewAccountDefinition  (optional)
/// @param DSAccountsApi_CreateOptions Options for modifying the behavior of the function.
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSNewAccountSummary*
-(NSNumber*) createWithPreviewBillingPlan:

 varNewAccountDefinition:(DSNewAccountDefinition*) varNewAccountDefinition
 options:(DSAccountsApi_CreateOptions*) options
 completionHandler: (void (^)(DSNewAccountSummary* output, NSError* error)) handler;

/// Creates one or more brand profile files for the account.
/// Creates one or more brand profile files for the account. The Account Branding feature (accountSettings properties `canSelfBrandSend` and `canSelfBrandSig`) must be set to **true** for the account to use this call.  An error is returned if `brandId` property for a brand profile is already set for the account. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.  When brand profile files are being uploaded, they must be combined into one zip file and the `Content-Type` must be `application/zip`.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param brand  (optional)

///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSBrandsResponse*
-(NSNumber*) createBrandWithAccountId:
(NSString*) accountId 
 brand:(DSBrand*) brand

 completionHandler: (void (^)(DSBrandsResponse* output, NSError* error)) handler;

/// Starts a new eMortgage Transaction
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param postTransactionsRequest  (optional)

///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSPostTransactionsResponse*
-(NSNumber*) createEMortgageTransactionWithAccountId:
(NSString*) accountId 
 postTransactionsRequest:(DSPostTransactionsRequest*) postTransactionsRequest

 completionHandler: (void (^)(DSPostTransactionsResponse* output, NSError* error)) handler;

/// Creates a new permission profile in the specified account.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param permissionProfile  (optional)
/// @param DSAccountsApi_CreatePermissionProfileOptions Options for modifying the behavior of the function.
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSPermissionProfile*
-(NSNumber*) createPermissionProfileWithAccountId:
(NSString*) accountId 
 permissionProfile:(DSPermissionProfile*) permissionProfile
 options:(DSAccountsApi_CreatePermissionProfileOptions*) options
 completionHandler: (void (^)(DSPermissionProfile* output, NSError* error)) handler;

/// Deletes the specified account.
/// This closes the specified account. You must be an account admin to close your account. Once closed, an account must be reopened by DocuSign.
///
/// @param accountId The external account number (int) or account ID Guid.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) deleteWithAccountId:
(NSString*) accountId 


 completionHandler: (void (^)(NSError* error)) handler;

/// Removes a brand.
///
/// @param accountId The external account number (int) or account ID Guid./// @param brandId The unique identifier of a brand.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) deleteBrandWithAccountId:
(NSString*) accountId  brandId:(NSString*) brandId 


 completionHandler: (void (^)(NSError* error)) handler;

/// Delete one branding logo.
///
/// @param accountId The external account number (int) or account ID Guid./// @param brandId The unique identifier of a brand./// @param logoType One of **Primary**, **Secondary** or **Email**.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) deleteBrandLogoByTypeWithAccountId:
(NSString*) accountId  brandId:(NSString*) brandId  logoType:(NSString*) logoType 


 completionHandler: (void (^)(NSError* error)) handler;

/// Deletes one or more brand profiles.
/// Deletes one or more brand profiles from an account. The Account Branding feature (accountSettings properties `canSelfBrandSend` and `canSelfBrandSend`) must be set to **true** to use this call.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param brandsRequest  (optional)

///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSBrandsResponse*
-(NSNumber*) deleteBrandsWithAccountId:
(NSString*) accountId 
 brandsRequest:(DSBrandsRequest*) brandsRequest

 completionHandler: (void (^)(DSBrandsResponse* output, NSError* error)) handler;

/// Deletes the signature for one or more captive recipient records.
/// Deletes the signature for one or more captive recipient records; it is primarily used for testing. This provides a way to reset the signature associated with a client user ID so that a new signature can be created the next time the client user ID is used.
///
/// @param accountId The external account number (int) or account ID Guid./// @param recipientPart 
/// @param captiveRecipientInformation  (optional)

///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSCaptiveRecipientInformation*
-(NSNumber*) deleteCaptiveRecipientWithAccountId:
(NSString*) accountId  recipientPart:(NSString*) recipientPart 
 captiveRecipientInformation:(DSCaptiveRecipientInformation*) captiveRecipientInformation

 completionHandler: (void (^)(DSCaptiveRecipientInformation* output, NSError* error)) handler;

/// Deletes configuration information for the eNote eOriginal integration.
///
/// @param accountId The external account number (int) or account ID Guid.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) deleteENoteConfigurationWithAccountId:
(NSString*) accountId 


 completionHandler: (void (^)(NSError* error)) handler;

/// Deletes a permissions profile within the specified account.
///
/// @param accountId The external account number (int) or account ID Guid./// @param permissionProfileId 


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) deletePermissionProfileWithAccountId:
(NSString*) accountId  permissionProfileId:(NSString*) permissionProfileId 


 completionHandler: (void (^)(NSError* error)) handler;

/// Retrieves the account information for the specified account.
/// Retrieves the account information for the specified account.  **Response** The `canUpgrade` property contains is a Boolean that indicates whether the account can be upgraded through the API. 
///
/// @param accountId The external account number (int) or account ID Guid.

/// @param DSAccountsApi_GetAccountInformationOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSAccountInformation*
-(NSNumber*) getAccountInformationWithAccountId:
(NSString*) accountId 

 options:(DSAccountsApi_GetAccountInformationOptions*) options
 completionHandler: (void (^)(DSAccountInformation* output, NSError* error)) handler;

/// Returns tab settings list for specified account
///
/// @param accountId The external account number (int) or account ID Guid.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSTabAccountSettings*
-(NSNumber*) getAccountTabSettingsWithAccountId:
(NSString*) accountId 


 completionHandler: (void (^)(DSTabAccountSettings* output, NSError* error)) handler;

/// Gets list of recurring and usage charges for the account.
/// Retrieves the list of recurring and usage charges for the account. This can be used to determine the charge structure and usage of charge plan items.   Privileges required: account administrator 
///
/// @param accountId The external account number (int) or account ID Guid.

/// @param DSAccountsApi_GetBillingChargesOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSBillingChargeResponse*
-(NSNumber*) getBillingChargesWithAccountId:
(NSString*) accountId 

 options:(DSAccountsApi_GetBillingChargesOptions*) options
 completionHandler: (void (^)(DSBillingChargeResponse* output, NSError* error)) handler;

/// Get information for a specific brand.
///
/// @param accountId The external account number (int) or account ID Guid./// @param brandId The unique identifier of a brand.

/// @param DSAccountsApi_GetBrandOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSBrand*
-(NSNumber*) getBrandWithAccountId:
(NSString*) accountId  brandId:(NSString*) brandId 

 options:(DSAccountsApi_GetBrandOptions*) options
 completionHandler: (void (^)(DSBrand* output, NSError* error)) handler;

/// Obtains the specified image for a brand.
///
/// @param accountId The external account number (int) or account ID Guid./// @param brandId The unique identifier of a brand./// @param logoType One of **Primary**, **Secondary** or **Email**.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) getBrandLogoByTypeWithAccountId:
(NSString*) accountId  brandId:(NSString*) brandId  logoType:(NSString*) logoType 


 completionHandler: (void (^)(NSError* error)) handler;

/// Returns the specified account's list of branding resources (metadata).
///
/// @param accountId The external account number (int) or account ID Guid./// @param brandId The unique identifier of a brand.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSBrandResourcesList*
-(NSNumber*) getBrandResourcesWithAccountId:
(NSString*) accountId  brandId:(NSString*) brandId 


 completionHandler: (void (^)(DSBrandResourcesList* output, NSError* error)) handler;

/// Returns the specified branding resource file.
///
/// @param accountId The external account number (int) or account ID Guid./// @param brandId The unique identifier of a brand./// @param resourceContentType 

/// @param DSAccountsApi_GetBrandResourcesByContentTypeOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) getBrandResourcesByContentTypeWithAccountId:
(NSString*) accountId  brandId:(NSString*) brandId  resourceContentType:(NSString*) resourceContentType 

 options:(DSAccountsApi_GetBrandResourcesByContentTypeOptions*) options
 completionHandler: (void (^)(NSError* error)) handler;

/// Gets the Electronic Record and Signature Disclosure.
/// Retrieves the Electronic Record and Signature Disclosure, with HTML formatting, for the requested envelope recipient. This might be different than the current account disclosure depending on account settings, such as branding, and when the account disclosure was last updated. An optional query string can be included to return the language for the disclosure.  
///
/// @param accountId The external account number (int) or account ID Guid./// @param langCode The simple type enumeration the language used in the response. The supported languages, with the language value shown in parenthesis, are:Arabic (ar), Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Bahasa Indonesia (id), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Bahasa Melayu (ms), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro), Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk) and Vietnamese (vi). Additionally, the value can be set to �browser� to automatically detect the browser language being used by the viewer and display the disclosure in that language.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSConsumerDisclosure*
-(NSNumber*) getConsumerDisclosureWithAccountId:
(NSString*) accountId  langCode:(NSString*) langCode 


 completionHandler: (void (^)(DSConsumerDisclosure* output, NSError* error)) handler;

/// Gets the Electronic Record and Signature Disclosure for the account.
/// Retrieves the Electronic Record and Signature Disclosure, with HTML formatting, associated with the account. You can use an optional query string to set the language for the disclosure.
///
/// @param accountId The external account number (int) or account ID Guid.

/// @param DSAccountsApi_GetConsumerDisclosureDefaultOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSConsumerDisclosure*
-(NSNumber*) getConsumerDisclosureDefaultWithAccountId:
(NSString*) accountId 

 options:(DSAccountsApi_GetConsumerDisclosureDefaultOptions*) options
 completionHandler: (void (^)(DSConsumerDisclosure* output, NSError* error)) handler;

/// Returns the configuration information for the eNote eOriginal integration.
///
/// @param accountId The external account number (int) or account ID Guid.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSENoteConfiguration*
-(NSNumber*) getENoteConfigurationWithAccountId:
(NSString*) accountId 


 completionHandler: (void (^)(DSENoteConfiguration* output, NSError* error)) handler;

/// Returns a permissions profile in the specified account.
///
/// @param accountId The external account number (int) or account ID Guid./// @param permissionProfileId 

/// @param DSAccountsApi_GetPermissionProfileOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSPermissionProfile*
-(NSNumber*) getPermissionProfileWithAccountId:
(NSString*) accountId  permissionProfileId:(NSString*) permissionProfileId 

 options:(DSAccountsApi_GetPermissionProfileOptions*) options
 completionHandler: (void (^)(DSPermissionProfile* output, NSError* error)) handler;

/// Retrieves the account provisioning information for the account.
/// Retrieves the account provisioning information for the account.
///



///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSProvisioningInformation*
-(NSNumber*) getProvisioningWithCompletionHandler: 



(void (^)(DSProvisioningInformation* output, NSError* error)) handler;

/// Gets a list of brand profiles.
/// Retrieves the list of brand profiles associated with the account and the default brand profiles. The Account Branding feature (accountSettings properties `canSelfBrandSend` and `canSelfBrandSend`)  must be set to **true** for the account to use this call.
///
/// @param accountId The external account number (int) or account ID Guid.

/// @param DSAccountsApi_ListBrandsOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSBrandsResponse*
-(NSNumber*) listBrandsWithAccountId:
(NSString*) accountId 

 options:(DSAccountsApi_ListBrandsOptions*) options
 completionHandler: (void (^)(DSBrandsResponse* output, NSError* error)) handler;

/// Gets a list of custom fields associated with the account.
/// Retrieves a list of envelope custom fields associated with the account. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. The list custom field lets the sender select the value of the field from a list you provide.
///
/// @param accountId The external account number (int) or account ID Guid.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSCustomFields*
-(NSNumber*) listCustomFieldsWithAccountId:
(NSString*) accountId 


 completionHandler: (void (^)(DSCustomFields* output, NSError* error)) handler;

/// Gets a list of permission profiles.
/// Retrieves a list of Permission Profiles. Permission Profiles are a standard set of user permissions that you can apply to individual users or users in a Group. This makes it easier to manage user permissions for a large number of users, without having to change permissions on a user-by-user basis.  Currently, Permission Profiles can only be created and modified in the DocuSign console.
///
/// @param accountId The external account number (int) or account ID Guid.

/// @param DSAccountsApi_ListPermissionsOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSPermissionProfileInformation*
-(NSNumber*) listPermissionsWithAccountId:
(NSString*) accountId 

 options:(DSAccountsApi_ListPermissionsOptions*) options
 completionHandler: (void (^)(DSPermissionProfileInformation* output, NSError* error)) handler;

/// Gets recipient names associated with an email address.
/// Retrieves a list of recipients in the specified account that are associated with a email address supplied in the query string.
///
/// @param accountId The external account number (int) or account ID Guid.

/// @param DSAccountsApi_ListRecipientNamesByEmailOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSRecipientNamesResponse*
-(NSNumber*) listRecipientNamesByEmailWithAccountId:
(NSString*) accountId 

 options:(DSAccountsApi_ListRecipientNamesByEmailOptions*) options
 completionHandler: (void (^)(DSRecipientNamesResponse* output, NSError* error)) handler;

/// Gets account settings information.
/// Retrieves the account settings information for the specified account.
///
/// @param accountId The external account number (int) or account ID Guid.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSAccountSettingsInformation*
-(NSNumber*) listSettingsWithAccountId:
(NSString*) accountId 


 completionHandler: (void (^)(DSAccountSettingsInformation* output, NSError* error)) handler;

/// Reserved: Gets the shared item status for one or more users.
/// Reserved: Retrieves shared item status for one or more users and types of items.  Users with account administration privileges can retrieve shared access information for all account users. Users without account administrator privileges can only retrieve shared access information for themselves and the returned information is limited to the retrieving the status of all members of the account that are sharing their folders to the user. This is equivalent to setting the shared=shared_from.
///
/// @param accountId The external account number (int) or account ID Guid.

/// @param DSAccountsApi_ListSharedAccessOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSAccountSharedAccess*
-(NSNumber*) listSharedAccessWithAccountId:
(NSString*) accountId 

 options:(DSAccountsApi_ListSharedAccessOptions*) options
 completionHandler: (void (^)(DSAccountSharedAccess* output, NSError* error)) handler;

/// Returns Account available signature providers for specified account.
///
/// @param accountId The external account number (int) or account ID Guid.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSAccountSignatureProviders*
-(NSNumber*) listSignatureProvidersWithAccountId:
(NSString*) accountId 


 completionHandler: (void (^)(DSAccountSignatureProviders* output, NSError* error)) handler;

/// Gets a list of unsupported file types.
/// Retrieves a list of file types (mime-types and file-extensions) that are not supported for upload through the DocuSign system.
///
/// @param accountId The external account number (int) or account ID Guid.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSFileTypeList*
-(NSNumber*) listUnsupportedFileTypesWithAccountId:
(NSString*) accountId 


 completionHandler: (void (^)(DSFileTypeList* output, NSError* error)) handler;

/// Modifies tab settings for specified account
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param tabAccountSettings  (optional)

///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSTabAccountSettings*
-(NSNumber*) updateAccountTabSettingsWithAccountId:
(NSString*) accountId 
 tabAccountSettings:(DSTabAccountSettings*) tabAccountSettings

 completionHandler: (void (^)(DSTabAccountSettings* output, NSError* error)) handler;

/// Updates an existing brand.
///
/// @param accountId The external account number (int) or account ID Guid./// @param brandId The unique identifier of a brand.
/// @param brand  (optional)

///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSBrand*
-(NSNumber*) updateBrandWithAccountId:
(NSString*) accountId  brandId:(NSString*) brandId 
 brand:(DSBrand*) brand

 completionHandler: (void (^)(DSBrand* output, NSError* error)) handler;

/// Put one branding logo.
///
/// @param accountId The external account number (int) or account ID Guid./// @param brandId The unique identifier of a brand./// @param logoType One of **Primary**, **Secondary** or **Email**.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) updateBrandLogoByTypeWithAccountId:
(NSString*) accountId  brandId:(NSString*) brandId  logoType:(NSString*) logoType 


 completionHandler: (void (^)(NSError* error)) handler;

/// Uploads a branding resource file.
///
/// @param accountId The external account number (int) or account ID Guid./// @param brandId The unique identifier of a brand./// @param resourceContentType 


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSBrandResources*
-(NSNumber*) updateBrandResourcesByContentTypeWithAccountId:
(NSString*) accountId  brandId:(NSString*) brandId  resourceContentType:(NSString*) resourceContentType 


 completionHandler: (void (^)(DSBrandResources* output, NSError* error)) handler;

/// Updates configuration information for the eNote eOriginal integration.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param eNoteConfiguration  (optional)

///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSENoteConfiguration*
-(NSNumber*) updateENoteConfigurationWithAccountId:
(NSString*) accountId 
 eNoteConfiguration:(DSENoteConfiguration*) eNoteConfiguration

 completionHandler: (void (^)(DSENoteConfiguration* output, NSError* error)) handler;

/// Updates a permission profile within the specified account.
///
/// @param accountId The external account number (int) or account ID Guid./// @param permissionProfileId 
/// @param permissionProfile  (optional)
/// @param DSAccountsApi_UpdatePermissionProfileOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSPermissionProfile*
-(NSNumber*) updatePermissionProfileWithAccountId:
(NSString*) accountId  permissionProfileId:(NSString*) permissionProfileId 
 permissionProfile:(DSPermissionProfile*) permissionProfile
 options:(DSAccountsApi_UpdatePermissionProfileOptions*) options
 completionHandler: (void (^)(DSPermissionProfile* output, NSError* error)) handler;

/// Updates the account settings for an account.
/// Updates the account settings for the specified account.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param accountSettingsInformation  (optional)

///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) updateSettingsWithAccountId:
(NSString*) accountId 
 accountSettingsInformation:(DSAccountSettingsInformation*) accountSettingsInformation

 completionHandler: (void (^)(NSError* error)) handler;

/// Reserved: Sets the shared access information for users.
/// Reserved: Sets the shared access information for one or more users.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param accountSharedAccess  (optional)
/// @param DSAccountsApi_UpdateSharedAccessOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSAccountSharedAccess*
-(NSNumber*) updateSharedAccessWithAccountId:
(NSString*) accountId 
 accountSharedAccess:(DSAccountSharedAccess*) accountSharedAccess
 options:(DSAccountsApi_UpdateSharedAccessOptions*) options
 completionHandler: (void (^)(DSAccountSharedAccess* output, NSError* error)) handler;


@end
