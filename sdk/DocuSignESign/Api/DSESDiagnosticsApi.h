#import <Foundation/Foundation.h>
#import <DSESApiRequestLogsResult.h>
#import <DSESDiagnosticsSettingsInformation.h>
#import <DSESErrorDetails.h>
#import <DSESResourceInformation.h>
#import <DSESServiceInformation.h>
#import <DSESApi.h>

/**
* DocuSign REST API
* The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
*
* OpenAPI spec version: v2.1
* Contact: devcenter@docusign.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface DSESDiagnosticsApi_ListRequestLogsOptions : DSESObject 
    /*
    * encoding 
    */
    @property NSString* encoding;
@end


@interface DSESDiagnosticsApi: NSObject <DSESApi>

extern NSString* kDSESDiagnosticsApiErrorDomain;
extern NSInteger kDSESDiagnosticsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(DSESApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Deletes the request log files.
/// Deletes the request log files.
///
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteRequestLogsWithCompletionHandler: (void (^)(NSError* error)) handler;

/// Gets a request logging log file.
/// Retrieves information for a single log entry.  **Request** The `requestLogfId` property can be retrieved by getting the list of log entries. The Content-Transfer-Encoding header can be set to base64 to retrieve the API request/response as base 64 string. Otherwise the bytes of the request/response are returned.  **Response** If the Content-Transfer-Encoding header was set to base64, the log is returned as a base64 string.
///
/// @param requestLogId 
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return NSURL*
-(NSURLSessionTask*) getRequestLogWithRequestLogId:
    (NSString*) requestLogId 
    completionHandler: (void (^)(NSURL* output, NSError* error)) handler;

/// Gets the API request logging settings.
/// Retrieves the current API request logging setting for the user and remaining log entries.  **Response** The response includes the current API request logging setting for the user, along with the maximum log entries and remaining log entries.
///
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDiagnosticsSettingsInformation*
-(NSURLSessionTask*) getRequestLogSettingsWithCompletionHandler: (void (^)(DSESDiagnosticsSettingsInformation* output, NSError* error)) handler;

/// Lists resources for REST version specified
/// Retrieves the base resources available for the DocuSign REST APIs.  You do not need an integrator key to view the REST API versions and resources.  Example: https://demo.docusign.net/restapi/v2 lists all of the base resources available in version 2 of the REST API on the DocuSign Demo system.  To view descriptions and samples of the service operations for all versions, remove the version number and add /help to the URL.  Example: https://demo.docusign.net/restapi/help lists the REST API operations on the DocuSign Demo system with XML and JSON request and response samples.
///
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESResourceInformation*
-(NSURLSessionTask*) getResourcesWithCompletionHandler: (void (^)(DSESResourceInformation* output, NSError* error)) handler;

/// Retrieves the available REST API versions.
/// Retrieves the available REST API versions.  DocuSign Production system: https://www.docusign.net/restapi/service_information DocuSign Demo system: https://demo.docusign.net/restapi/service_information  You do not need an integrator key to view the REST API versions and resources.
///
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESServiceInformation*
-(NSURLSessionTask*) getServiceWithCompletionHandler: (void (^)(DSESServiceInformation* output, NSError* error)) handler;

/// Gets the API request logging log files.
/// Retrieves a list of log entries as a JSON or xml object or as a zip file containing the entries.  If the Accept header is set to application/zip, the response is a zip file containing individual text files, each representing an API request.  If the Accept header is set to `application/json` or `application/xml`, the response returns list of log entries in either JSON or XML. An example JSON response body is shown below. 
///
///
///
/// @param DSESDiagnosticsApi_ListRequestLogsOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESApiRequestLogsResult*
-(NSURLSessionTask*) listRequestLogsWithEncoding:
    (DSESDiagnosticsApi_ListRequestLogsOptions*) options
    completionHandler: (void (^)(DSESApiRequestLogsResult* output, NSError* error)) handler;

/// Enables or disables API request logging for troubleshooting.
/// Enables or disables API request logging for troubleshooting.  When enabled (`apiRequestLogging` is set to true), REST API requests and responses for the user are added to a log. A log can have up to 50 requests/responses and the current number of log entries can be determined by getting the settings. Logging is automatically disabled when the log limit of 50 is reached.  You can call [ML:GetRequestLog] or [ML:GetRequestLogs] to download the log files (individually or as a zip file). Call [ML:DeleteRequestLogs] to clear the log by deleting current entries.  Private information, such as passwords and integrator key information, which is normally located in the call header is omitted from the request/response log.  ###### Note: API request logging only captures requests from the authenticated user. Any call that does not authenticate the user and resolve a userId isn't logged. Meaning that login_information, NewAccounts, or other distributor-credential calls are not logged. 
///
///
/// @param diagnosticsSettingsInformation  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDiagnosticsSettingsInformation*
-(NSURLSessionTask*) updateRequestLogSettingsWithDiagnosticsSettingsInformation:
    (DSESDiagnosticsSettingsInformation*) diagnosticsSettingsInformation
    completionHandler: (void (^)(DSESDiagnosticsSettingsInformation* output, NSError* error)) handler;


@end
