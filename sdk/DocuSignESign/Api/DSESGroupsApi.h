#import <Foundation/Foundation.h>
#import <DSESBrandsRequest.h>
#import <DSESBrandsResponse.h>
#import <DSESErrorDetails.h>
#import <DSESGroupInformation.h>
#import <DSESUserInfoList.h>
#import <DSESUsersResponse.h>
#import <DSESApi.h>

/**
* DocuSign REST API
* The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
*
* OpenAPI spec version: v2.1
* Contact: devcenter@docusign.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface DSESGroupsApi_ListGroupUsersOptions : DSESObject 
    /*
    * count Number of records to return. The number must be greater than 1 and less than or equal to 100. 
    */
    @property NSString* count;

    /*
    * startPosition Starting value for the list.
    */
    @property NSString* startPosition;
@end

@interface DSESGroupsApi_ListGroupsOptions : DSESObject 
    /*
    * count Number of records to return. The number must be greater than 1 and less than or equal to 100.
    */
    @property NSString* count;

    /*
    * groupType 
    */
    @property NSString* groupType;

    /*
    * includeUsercount 
    */
    @property NSString* includeUsercount;

    /*
    * searchText 
    */
    @property NSString* searchText;

    /*
    * startPosition Starting value for the list.
    */
    @property NSString* startPosition;
@end


@interface DSESGroupsApi: NSObject <DSESApi>

extern NSString* kDSESGroupsApiErrorDomain;
extern NSInteger kDSESGroupsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(DSESApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Creates one or more groups for the account.
/// Creates one or more groups for the account.  Groups can be used to help manage users by associating users with a group. You can associate a group with a Permission Profile, which sets the user permissions for users in that group without having to set the `userSettings` property for each user. You are not required to set Permission Profiles for a group, but it makes it easier to manage user permissions for a large number of users. You can also use groups with template sharing to limit user access to templates.
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param groupInformation  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESGroupInformation*
-(NSURLSessionTask*) createGroupsWithAccountId:
    (NSString*) accountId 
    groupInformation:(DSESGroupInformation*) groupInformation
    completionHandler: (void (^)(DSESGroupInformation* output, NSError* error)) handler;

/// Deletes brand information from the requested group.
/// Deletes brand information from the requested group.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param groupId The ID of the group being accessed.
///
/// @param brandsRequest  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBrandsResponse*
-(NSURLSessionTask*) deleteBrandsWithAccountId:
    (NSString*) accountId 
    groupId:(NSString*) groupId 
    brandsRequest:(DSESBrandsRequest*) brandsRequest
    completionHandler: (void (^)(DSESBrandsResponse* output, NSError* error)) handler;

/// Deletes one or more users from a gro
/// Deletes one or more users from a group. 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param groupId The ID of the group being accessed.
///
/// @param userInfoList  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESUsersResponse*
-(NSURLSessionTask*) deleteGroupUsersWithAccountId:
    (NSString*) accountId 
    groupId:(NSString*) groupId 
    userInfoList:(DSESUserInfoList*) userInfoList
    completionHandler: (void (^)(DSESUsersResponse* output, NSError* error)) handler;

/// Deletes an existing user group.
/// Deletes an existing user group.
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param groupInformation  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESGroupInformation*
-(NSURLSessionTask*) deleteGroupsWithAccountId:
    (NSString*) accountId 
    groupInformation:(DSESGroupInformation*) groupInformation
    completionHandler: (void (^)(DSESGroupInformation* output, NSError* error)) handler;

/// Gets group brand ID Information. 
/// Retrieves information about the brands associated with the requested group.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param groupId The ID of the group being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBrandsResponse*
-(NSURLSessionTask*) getBrandsWithAccountId:
    (NSString*) accountId 
    groupId:(NSString*) groupId 
    completionHandler: (void (^)(DSESBrandsResponse* output, NSError* error)) handler;

/// Gets a list of users in a group.
/// Retrieves a list of users in a group.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param groupId The ID of the group being accessed.
///
///
/// @param DSESGroupsApi_ListGroupUsersOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESUsersResponse*
-(NSURLSessionTask*) listGroupUsersWithAccountId:
    (NSString*) accountId 
    groupId:(NSString*) groupId 
    options:(DSESGroupsApi_ListGroupUsersOptions*) options
    completionHandler: (void (^)(DSESUsersResponse* output, NSError* error)) handler;

/// Gets information about groups associated with the account.
/// Retrieves information about groups associated with the account.
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
/// @param DSESGroupsApi_ListGroupsOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESGroupInformation*
-(NSURLSessionTask*) listGroupsWithAccountId:
    (NSString*) accountId 
    options:(DSESGroupsApi_ListGroupsOptions*) options
    completionHandler: (void (^)(DSESGroupInformation* output, NSError* error)) handler;

/// Adds group brand ID information to a group.
/// Adds group brand ID information to a group.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param groupId The ID of the group being accessed.
///
/// @param brandsRequest  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBrandsResponse*
-(NSURLSessionTask*) updateBrandsWithAccountId:
    (NSString*) accountId 
    groupId:(NSString*) groupId 
    brandsRequest:(DSESBrandsRequest*) brandsRequest
    completionHandler: (void (^)(DSESBrandsResponse* output, NSError* error)) handler;

/// Adds one or more users to an existing group.
/// Adds one or more users to an existing group.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param groupId The ID of the group being accessed.
///
/// @param userInfoList  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESUsersResponse*
-(NSURLSessionTask*) updateGroupUsersWithAccountId:
    (NSString*) accountId 
    groupId:(NSString*) groupId 
    userInfoList:(DSESUserInfoList*) userInfoList
    completionHandler: (void (^)(DSESUsersResponse* output, NSError* error)) handler;

/// Updates the group information for a group.
/// Updates the group name and modifies, or sets, the permission profile for the group.
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param groupInformation  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESGroupInformation*
-(NSURLSessionTask*) updateGroupsWithAccountId:
    (NSString*) accountId 
    groupInformation:(DSESGroupInformation*) groupInformation
    completionHandler: (void (^)(DSESGroupInformation* output, NSError* error)) handler;


@end
