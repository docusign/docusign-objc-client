#import <Foundation/Foundation.h>
#import <DSESAccountInformation.h>
#import <DSESAccountPasswordRules.h>
#import <DSESAccountSettingsInformation.h>
#import <DSESAccountSharedAccess.h>
#import <DSESAccountSignatureProviders.h>
#import <DSESBillingChargeResponse.h>
#import <DSESBrand.h>
#import <DSESBrandResources.h>
#import <DSESBrandResourcesList.h>
#import <DSESBrandsRequest.h>
#import <DSESBrandsResponse.h>
#import <DSESCaptiveRecipientInformation.h>
#import <DSESConsumerDisclosure.h>
#import <DSESCustomField.h>
#import <DSESCustomFields.h>
#import <DSESENoteConfiguration.h>
#import <DSESErrorDetails.h>
#import <DSESFileTypeList.h>
#import <DSESNewAccountDefinition.h>
#import <DSESNewAccountSummary.h>
#import <DSESPaymentGatewayAccountsInfo.h>
#import <DSESPermissionProfile.h>
#import <DSESPermissionProfileInformation.h>
#import <DSESProvisioningInformation.h>
#import <DSESRecipientNamesResponse.h>
#import <DSESSupportedLanguages.h>
#import <DSESTabAccountSettings.h>
#import <DSESUserPasswordRules.h>
#import <DSESWatermark.h>
#import <DSESApi.h>

/**
* DocuSign REST API
* The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
*
* OpenAPI spec version: v2.1
* Contact: devcenter@docusign.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface DSESAccountsApi_CreateOptions : DSESObject 
    /*
    * previewBillingPlan When set to **true**, creates the account using a preview billing plan.
    */
    @property NSString* previewBillingPlan;
@end

@interface DSESAccountsApi_CreateCustomFieldOptions : DSESObject 
    /*
    * applyToTemplates 
    */
    @property NSString* applyToTemplates;
@end

@interface DSESAccountsApi_CreatePermissionProfileOptions : DSESObject 
    /*
    * include 
    */
    @property NSString* include;
@end

@interface DSESAccountsApi_DeleteCustomFieldOptions : DSESObject 
    /*
    * applyToTemplates 
    */
    @property NSString* applyToTemplates;
@end

@interface DSESAccountsApi_DeletePermissionProfileOptions : DSESObject 
    /*
    * moveUsersTo 
    */
    @property NSString* moveUsersTo;
@end

@interface DSESAccountsApi_GetAccountInformationOptions : DSESObject 
    /*
    * includeAccountSettings When set to **true**, includes the account settings for the account in the response.
    */
    @property NSString* includeAccountSettings;
@end

@interface DSESAccountsApi_GetBillingChargesOptions : DSESObject 
    /*
    * includeCharges Specifies which billing charges to return. Valid values are:  * envelopes * seats 
    */
    @property NSString* includeCharges;
@end

@interface DSESAccountsApi_GetBrandOptions : DSESObject 
    /*
    * includeExternalReferences 
    */
    @property NSString* includeExternalReferences;

    /*
    * includeLogos 
    */
    @property NSString* includeLogos;
@end

@interface DSESAccountsApi_GetBrandResourcesByContentTypeOptions : DSESObject 
    /*
    * langcode 
    */
    @property NSString* langcode;

    /*
    * returnMaster 
    */
    @property NSString* returnMaster;
@end

@interface DSESAccountsApi_GetConsumerDisclosureDefaultOptions : DSESObject 
    /*
    * langCode Specifies the language used in the response. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Armenian (hy), Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Bahasa Indonesia (id), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Bahasa Melayu (ms), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro), Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk), and Vietnamese (vi).  Additionally, the value can be set to &#x60;browser&#x60; to automatically detect the browser language being used by the viewer and display the disclosure in that language. 
    */
    @property NSString* langCode;
@end

@interface DSESAccountsApi_GetPermissionProfileOptions : DSESObject 
    /*
    * include 
    */
    @property NSString* include;
@end

@interface DSESAccountsApi_ListBrandsOptions : DSESObject 
    /*
    * excludeDistributorBrand When set to **true**, excludes distributor brand information from the response set.
    */
    @property NSString* excludeDistributorBrand;

    /*
    * includeLogos When set to **true**, returns the logos associated with the brand.
    */
    @property NSString* includeLogos;
@end

@interface DSESAccountsApi_ListPermissionsOptions : DSESObject 
    /*
    * include 
    */
    @property NSString* include;
@end

@interface DSESAccountsApi_ListRecipientNamesByEmailOptions : DSESObject 
    /*
    * email The email address for the user
    */
    @property NSString* email;
@end

@interface DSESAccountsApi_ListSharedAccessOptions : DSESObject 
    /*
    * count Specifies maximum number of results included in the response. If no value is specified, this defaults to 1000.
    */
    @property NSString* count;

    /*
    * envelopesNotSharedUserStatus 
    */
    @property NSString* envelopesNotSharedUserStatus;

    /*
    * folderIds 
    */
    @property NSString* folderIds;

    /*
    * itemType Specifies the type of shared item being requested. The accepted values are: -envelopes: returns information about envelope sharing between users.
    */
    @property NSString* itemType;

    /*
    * searchText This can be used to filter user names in the response. The wild-card &#39;*&#39; (asterisk) can be used around the string.
    */
    @property NSString* searchText;

    /*
    * shared Specifies which users should be included in the response. Multiple values can be used in the query by using a comma separated list of shared values. If the requestor does not have account administrator privileges, the shared_to value is used. Requestors that do not have account administrator privileges can only use the shared_to, any other setting will result in an error. The accepted values are:  -not_shared: Returns account users that the specified item type is not being shared with and that are not sharing the specified item type with the user.  User X (Share) X Account user  -shared_to: Returns account users that the specified item type is not being shared with and who are sharing the specified item type with the user (only shared to the user).  User X (Share) Account user  -shared_from: Returns account users that the specified item type is being shared with and who are not sharing the specified item type with the user (only shared from the user).  User (Share) &gt;&gt; Account user  -shared_to_and_from: Returns account users that the specified item type is being shared with and who are sharing the specified item type with the user.  User &lt;&lt; (Share) &gt;&gt; Account user
    */
    @property NSString* shared;

    /*
    * startPosition If the response set exceeds Count, this can be used to specify that the method should return users starting at the specified index. The first index is 0, and should be used in the first GET call. Typically this number is a multiple of Count. If no value is specified, this defaults to be 0. 
    */
    @property NSString* startPosition;

    /*
    * userIds A comma separated list of userIds for whom the shared item information is being requested. 
    */
    @property NSString* userIds;
@end

@interface DSESAccountsApi_UpdateConsumerDisclosureOptions : DSESObject 
    /*
    * includeMetadata 
    */
    @property NSString* includeMetadata;
@end

@interface DSESAccountsApi_UpdateCustomFieldOptions : DSESObject 
    /*
    * applyToTemplates 
    */
    @property NSString* applyToTemplates;
@end

@interface DSESAccountsApi_UpdatePermissionProfileOptions : DSESObject 
    /*
    * include 
    */
    @property NSString* include;
@end

@interface DSESAccountsApi_UpdateSharedAccessOptions : DSESObject 
    /*
    * itemType 
    */
    @property NSString* itemType;

    /*
    * preserveExistingSharedAccess 
    */
    @property NSString* preserveExistingSharedAccess;

    /*
    * userIds 
    */
    @property NSString* userIds;
@end


@interface DSESAccountsApi: NSObject <DSESApi>

extern NSString* kDSESAccountsApiErrorDomain;
extern NSInteger kDSESAccountsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(DSESApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Creates new accounts.
/// Creates new DocuSign service accounts.  This is used to create multiple DocuSign accounts with one call. It uses the same information and formats as the normal a  [Accounts:create](accounts_create) call with the information included within a `newAccountRequests` element. A maximum of 100 new accounts can be created at one time.  Note that the structure of the XML request is slightly different than the JSON request, in that the new account information is included in a `newAccountDefinition` property inside the `newAccountRequests` element. Response  The response returns the new account ID, password and the default user information for each newly created account.  A 201 code is returned if the call succeeded.  While the call may have succeed, some of the individual account requests may have failed. In the case of failures to create the account,  an `errorDetails` node is added in the response to each specific request that failed.
///
///
/// @param varNewAccountDefinition  
/// @param DSESAccountsApi_CreateOptions Options for modifying the request.
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESNewAccountSummary*
-(NSURLSessionTask*) createWithPreviewBillingPlan:
    (DSESNewAccountDefinition*) varNewAccountDefinition
    options:(DSESAccountsApi_CreateOptions*) options
    completionHandler: (void (^)(DSESNewAccountSummary* output, NSError* error)) handler;

/// Creates one or more brand profile files for the account.
/// Creates one or more brand profile files for the account. The Account Branding feature (accountSettings properties `canSelfBrandSend` and `canSelfBrandSig`) must be set to **true** for the account to use this call.  An error is returned if `brandId` property for a brand profile is already set for the account. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.  When brand profile files are being uploaded, they must be combined into one zip file and the `Content-Type` must be `application/zip`.
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param brand  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBrandsResponse*
-(NSURLSessionTask*) createBrandWithAccountId:
    (NSString*) accountId 
    brand:(DSESBrand*) brand
    completionHandler: (void (^)(DSESBrandsResponse* output, NSError* error)) handler;

/// Creates an acount custom field.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param customField  
/// @param DSESAccountsApi_CreateCustomFieldOptions Options for modifying the request.
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESCustomFields*
-(NSURLSessionTask*) createCustomFieldWithAccountId:
    (NSString*) accountId 
    customField:(DSESCustomField*) customField
    options:(DSESAccountsApi_CreateCustomFieldOptions*) options
    completionHandler: (void (^)(DSESCustomFields* output, NSError* error)) handler;

/// Creates a new permission profile in the specified account.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param permissionProfile  
/// @param DSESAccountsApi_CreatePermissionProfileOptions Options for modifying the request.
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESPermissionProfile*
-(NSURLSessionTask*) createPermissionProfileWithAccountId:
    (NSString*) accountId 
    permissionProfile:(DSESPermissionProfile*) permissionProfile
    options:(DSESAccountsApi_CreatePermissionProfileOptions*) options
    completionHandler: (void (^)(DSESPermissionProfile* output, NSError* error)) handler;

/// Deletes the specified account.
/// This closes the specified account. You must be an account admin to close your account. Once closed, an account must be reopened by DocuSign.
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Removes a brand.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param brandId The unique identifier of a brand.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteBrandWithAccountId:
    (NSString*) accountId 
    brandId:(NSString*) brandId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Delete one branding logo.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param brandId The unique identifier of a brand.
/// @param logoType One of **Primary**, **Secondary** or **Email**.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteBrandLogoByTypeWithAccountId:
    (NSString*) accountId 
    brandId:(NSString*) brandId 
    logoType:(NSString*) logoType 
    completionHandler: (void (^)(NSError* error)) handler;

/// Deletes one or more brand profiles.
/// Deletes one or more brand profiles from an account. The Account Branding feature (accountSettings properties `canSelfBrandSend` and `canSelfBrandSend`) must be set to **true** to use this call.
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param brandsRequest  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBrandsResponse*
-(NSURLSessionTask*) deleteBrandsWithAccountId:
    (NSString*) accountId 
    brandsRequest:(DSESBrandsRequest*) brandsRequest
    completionHandler: (void (^)(DSESBrandsResponse* output, NSError* error)) handler;

/// Deletes the signature for one or more captive recipient records.
/// Deletes the signature for one or more captive recipient records; it is primarily used for testing. This provides a way to reset the signature associated with a client user ID so that a new signature can be created the next time the client user ID is used.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param recipientPart 
///
/// @param captiveRecipientInformation  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESCaptiveRecipientInformation*
-(NSURLSessionTask*) deleteCaptiveRecipientWithAccountId:
    (NSString*) accountId 
    recipientPart:(NSString*) recipientPart 
    captiveRecipientInformation:(DSESCaptiveRecipientInformation*) captiveRecipientInformation
    completionHandler: (void (^)(DSESCaptiveRecipientInformation* output, NSError* error)) handler;

/// Delete an existing account custom field.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param customFieldId 
///
///
/// @param DSESAccountsApi_DeleteCustomFieldOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteCustomFieldWithAccountId:
    (NSString*) accountId 
    customFieldId:(NSString*) customFieldId 
    options:(DSESAccountsApi_DeleteCustomFieldOptions*) options
    completionHandler: (void (^)(NSError* error)) handler;

/// Deletes configuration information for the eNote eOriginal integration.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteENoteConfigurationWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Deletes a permissions profile within the specified account.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param permissionProfileId 
///
///
/// @param DSESAccountsApi_DeletePermissionProfileOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deletePermissionProfileWithAccountId:
    (NSString*) accountId 
    permissionProfileId:(NSString*) permissionProfileId 
    options:(DSESAccountsApi_DeletePermissionProfileOptions*) options
    completionHandler: (void (^)(NSError* error)) handler;

/// Retrieves the account information for the specified account.
/// Retrieves the account information for the specified account.  **Response** The `canUpgrade` property contains is a Boolean that indicates whether the account can be upgraded through the API. 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
/// @param DSESAccountsApi_GetAccountInformationOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountInformation*
-(NSURLSessionTask*) getAccountInformationWithAccountId:
    (NSString*) accountId 
    options:(DSESAccountsApi_GetAccountInformationOptions*) options
    completionHandler: (void (^)(DSESAccountInformation* output, NSError* error)) handler;

/// Returns tab settings list for specified account
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTabAccountSettings*
-(NSURLSessionTask*) getAccountTabSettingsWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESTabAccountSettings* output, NSError* error)) handler;

/// Get all payment gateway account for the provided accountId
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESPaymentGatewayAccountsInfo*
-(NSURLSessionTask*) getAllPaymentGatewayAccountsWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESPaymentGatewayAccountsInfo* output, NSError* error)) handler;

/// Gets list of recurring and usage charges for the account.
/// Retrieves the list of recurring and usage charges for the account. This can be used to determine the charge structure and usage of charge plan items.   Privileges required: account administrator 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
/// @param DSESAccountsApi_GetBillingChargesOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBillingChargeResponse*
-(NSURLSessionTask*) getBillingChargesWithAccountId:
    (NSString*) accountId 
    options:(DSESAccountsApi_GetBillingChargesOptions*) options
    completionHandler: (void (^)(DSESBillingChargeResponse* output, NSError* error)) handler;

/// Get information for a specific brand.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param brandId The unique identifier of a brand.
///
///
/// @param DSESAccountsApi_GetBrandOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBrand*
-(NSURLSessionTask*) getBrandWithAccountId:
    (NSString*) accountId 
    brandId:(NSString*) brandId 
    options:(DSESAccountsApi_GetBrandOptions*) options
    completionHandler: (void (^)(DSESBrand* output, NSError* error)) handler;

/// Export a specific brand.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param brandId The unique identifier of a brand.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) getBrandExportFileWithAccountId:
    (NSString*) accountId 
    brandId:(NSString*) brandId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Obtains the specified image for a brand.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param brandId The unique identifier of a brand.
/// @param logoType One of **Primary**, **Secondary** or **Email**.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return NSURL*
-(NSURLSessionTask*) getBrandLogoByTypeWithAccountId:
    (NSString*) accountId 
    brandId:(NSString*) brandId 
    logoType:(NSString*) logoType 
    completionHandler: (void (^)(NSURL* output, NSError* error)) handler;

/// Returns the specified account's list of branding resources (metadata).
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param brandId The unique identifier of a brand.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBrandResourcesList*
-(NSURLSessionTask*) getBrandResourcesWithAccountId:
    (NSString*) accountId 
    brandId:(NSString*) brandId 
    completionHandler: (void (^)(DSESBrandResourcesList* output, NSError* error)) handler;

/// Returns the specified branding resource file.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param brandId The unique identifier of a brand.
/// @param resourceContentType 
///
///
/// @param DSESAccountsApi_GetBrandResourcesByContentTypeOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) getBrandResourcesByContentTypeWithAccountId:
    (NSString*) accountId 
    brandId:(NSString*) brandId 
    resourceContentType:(NSString*) resourceContentType 
    options:(DSESAccountsApi_GetBrandResourcesByContentTypeOptions*) options
    completionHandler: (void (^)(NSError* error)) handler;

/// Gets the Electronic Record and Signature Disclosure.
/// Retrieves the Electronic Record and Signature Disclosure, with HTML formatting, for the requested envelope recipient. This might be different than the current account disclosure depending on account settings, such as branding, and when the account disclosure was last updated. An optional query string can be included to return the language for the disclosure.  
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param langCode The simple type enumeration the language used in the response. The supported languages, with the language value shown in parenthesis, are:Arabic (ar), Armenian (hy), Armenian (hy), Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Bahasa Indonesia (id), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Bahasa Melayu (ms), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro), Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk) and Vietnamese (vi). Additionally, the value can be set to Ã¯Â¿Â½browserÃ¯Â¿Â½ to automatically detect the browser language being used by the viewer and display the disclosure in that language.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESConsumerDisclosure*
-(NSURLSessionTask*) getConsumerDisclosureWithAccountId:
    (NSString*) accountId 
    langCode:(NSString*) langCode 
    completionHandler: (void (^)(DSESConsumerDisclosure* output, NSError* error)) handler;

/// Gets the Electronic Record and Signature Disclosure for the account.
/// Retrieves the Electronic Record and Signature Disclosure, with HTML formatting, associated with the account. You can use an optional query string to set the language for the disclosure.
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
/// @param DSESAccountsApi_GetConsumerDisclosureDefaultOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESConsumerDisclosure*
-(NSURLSessionTask*) getConsumerDisclosureDefaultWithAccountId:
    (NSString*) accountId 
    options:(DSESAccountsApi_GetConsumerDisclosureDefaultOptions*) options
    completionHandler: (void (^)(DSESConsumerDisclosure* output, NSError* error)) handler;

/// Returns the configuration information for the eNote eOriginal integration.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESENoteConfiguration*
-(NSURLSessionTask*) getENoteConfigurationWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESENoteConfiguration* output, NSError* error)) handler;

/// Get the password rules
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountPasswordRules*
-(NSURLSessionTask*) getPasswordRulesWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESAccountPasswordRules* output, NSError* error)) handler;

/// Get membership account password rules
/// 
///
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESUserPasswordRules*
-(NSURLSessionTask*) getPasswordRules_1WithCompletionHandler: (void (^)(DSESUserPasswordRules* output, NSError* error)) handler;

/// Returns a permissions profile in the specified account.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param permissionProfileId 
///
///
/// @param DSESAccountsApi_GetPermissionProfileOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESPermissionProfile*
-(NSURLSessionTask*) getPermissionProfileWithAccountId:
    (NSString*) accountId 
    permissionProfileId:(NSString*) permissionProfileId 
    options:(DSESAccountsApi_GetPermissionProfileOptions*) options
    completionHandler: (void (^)(DSESPermissionProfile* output, NSError* error)) handler;

/// Retrieves the account provisioning information for the account.
/// Retrieves the account provisioning information for the account.
///
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESProvisioningInformation*
-(NSURLSessionTask*) getProvisioningWithCompletionHandler: (void (^)(DSESProvisioningInformation* output, NSError* error)) handler;

/// Gets list of supported languages for recipient language setting.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESSupportedLanguages*
-(NSURLSessionTask*) getSupportedLanguagesWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESSupportedLanguages* output, NSError* error)) handler;

/// Get watermark information.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESWatermark*
-(NSURLSessionTask*) getWatermarkWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESWatermark* output, NSError* error)) handler;

/// Get watermark preview.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param watermark  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESWatermark*
-(NSURLSessionTask*) getWatermarkPreviewWithAccountId:
    (NSString*) accountId 
    watermark:(DSESWatermark*) watermark
    completionHandler: (void (^)(DSESWatermark* output, NSError* error)) handler;

/// Gets a list of brand profiles.
/// Retrieves the list of brand profiles associated with the account and the default brand profiles. The Account Branding feature (accountSettings properties `canSelfBrandSend` and `canSelfBrandSend`)  must be set to **true** for the account to use this call.
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
/// @param DSESAccountsApi_ListBrandsOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBrandsResponse*
-(NSURLSessionTask*) listBrandsWithAccountId:
    (NSString*) accountId 
    options:(DSESAccountsApi_ListBrandsOptions*) options
    completionHandler: (void (^)(DSESBrandsResponse* output, NSError* error)) handler;

/// Gets a list of custom fields associated with the account.
/// Retrieves a list of envelope custom fields associated with the account. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. The list custom field lets the sender select the value of the field from a list you provide.
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESCustomFields*
-(NSURLSessionTask*) listCustomFieldsWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESCustomFields* output, NSError* error)) handler;

/// Gets a list of permission profiles.
/// Retrieves a list of Permission Profiles. Permission Profiles are a standard set of user permissions that you can apply to individual users or users in a Group. This makes it easier to manage user permissions for a large number of users, without having to change permissions on a user-by-user basis.  Currently, Permission Profiles can only be created and modified in the DocuSign console.
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
/// @param DSESAccountsApi_ListPermissionsOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESPermissionProfileInformation*
-(NSURLSessionTask*) listPermissionsWithAccountId:
    (NSString*) accountId 
    options:(DSESAccountsApi_ListPermissionsOptions*) options
    completionHandler: (void (^)(DSESPermissionProfileInformation* output, NSError* error)) handler;

/// Gets recipient names associated with an email address.
/// Retrieves a list of recipients in the specified account that are associated with a email address supplied in the query string.
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
/// @param DSESAccountsApi_ListRecipientNamesByEmailOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESRecipientNamesResponse*
-(NSURLSessionTask*) listRecipientNamesByEmailWithAccountId:
    (NSString*) accountId 
    options:(DSESAccountsApi_ListRecipientNamesByEmailOptions*) options
    completionHandler: (void (^)(DSESRecipientNamesResponse* output, NSError* error)) handler;

/// Gets account settings information.
/// Retrieves the account settings information for the specified account.
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountSettingsInformation*
-(NSURLSessionTask*) listSettingsWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESAccountSettingsInformation* output, NSError* error)) handler;

/// Reserved: Gets the shared item status for one or more users.
/// Reserved: Retrieves shared item status for one or more users and types of items.  Users with account administration privileges can retrieve shared access information for all account users. Users without account administrator privileges can only retrieve shared access information for themselves and the returned information is limited to the retrieving the status of all members of the account that are sharing their folders to the user. This is equivalent to setting the shared=shared_from.
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
/// @param DSESAccountsApi_ListSharedAccessOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountSharedAccess*
-(NSURLSessionTask*) listSharedAccessWithAccountId:
    (NSString*) accountId 
    options:(DSESAccountsApi_ListSharedAccessOptions*) options
    completionHandler: (void (^)(DSESAccountSharedAccess* output, NSError* error)) handler;

/// Returns Account available signature providers for specified account.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountSignatureProviders*
-(NSURLSessionTask*) listSignatureProvidersWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESAccountSignatureProviders* output, NSError* error)) handler;

/// Gets a list of unsupported file types.
/// Retrieves a list of file types (mime-types and file-extensions) that are not supported for upload through the DocuSign system.
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESFileTypeList*
-(NSURLSessionTask*) listUnsupportedFileTypesWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESFileTypeList* output, NSError* error)) handler;

/// Modifies tab settings for specified account
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param tabAccountSettings  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTabAccountSettings*
-(NSURLSessionTask*) updateAccountTabSettingsWithAccountId:
    (NSString*) accountId 
    tabAccountSettings:(DSESTabAccountSettings*) tabAccountSettings
    completionHandler: (void (^)(DSESTabAccountSettings* output, NSError* error)) handler;

/// Updates an existing brand.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param brandId The unique identifier of a brand.
///
/// @param brand  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBrand*
-(NSURLSessionTask*) updateBrandWithAccountId:
    (NSString*) accountId 
    brandId:(NSString*) brandId 
    brand:(DSESBrand*) brand
    completionHandler: (void (^)(DSESBrand* output, NSError* error)) handler;

/// Put one branding logo.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param brandId The unique identifier of a brand.
/// @param logoType One of **Primary**, **Secondary** or **Email**.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) updateBrandLogoByTypeWithAccountId:
    (NSString*) accountId 
    brandId:(NSString*) brandId 
    logoType:(NSString*) logoType 
    completionHandler: (void (^)(NSError* error)) handler;

/// Uploads a branding resource file.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param brandId The unique identifier of a brand.
/// @param resourceContentType 
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBrandResources*
-(NSURLSessionTask*) updateBrandResourcesByContentTypeWithAccountId:
    (NSString*) accountId 
    brandId:(NSString*) brandId 
    resourceContentType:(NSString*) resourceContentType 
    completionHandler: (void (^)(DSESBrandResources* output, NSError* error)) handler;

/// Update Consumer Disclosure.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param langCode The simple type enumeration the language used in the response. The supported languages, with the language value shown in parenthesis, are:Arabic (ar), Armenian (hy), Armenian (hy), Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Bahasa Indonesia (id), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Bahasa Melayu (ms), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro), Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk) and Vietnamese (vi). Additionally, the value can be set to Ã¯Â¿Â½browserÃ¯Â¿Â½ to automatically detect the browser language being used by the viewer and display the disclosure in that language.
///
/// @param consumerDisclosure  
/// @param DSESAccountsApi_UpdateConsumerDisclosureOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESConsumerDisclosure*
-(NSURLSessionTask*) updateConsumerDisclosureWithAccountId:
    (NSString*) accountId 
    langCode:(NSString*) langCode 
    consumerDisclosure:(DSESConsumerDisclosure*) consumerDisclosure
    options:(DSESAccountsApi_UpdateConsumerDisclosureOptions*) options
    completionHandler: (void (^)(DSESConsumerDisclosure* output, NSError* error)) handler;

/// Updates an existing account custom field.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param customFieldId 
///
/// @param customField  
/// @param DSESAccountsApi_UpdateCustomFieldOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESCustomFields*
-(NSURLSessionTask*) updateCustomFieldWithAccountId:
    (NSString*) accountId 
    customFieldId:(NSString*) customFieldId 
    customField:(DSESCustomField*) customField
    options:(DSESAccountsApi_UpdateCustomFieldOptions*) options
    completionHandler: (void (^)(DSESCustomFields* output, NSError* error)) handler;

/// Updates configuration information for the eNote eOriginal integration.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param eNoteConfiguration  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESENoteConfiguration*
-(NSURLSessionTask*) updateENoteConfigurationWithAccountId:
    (NSString*) accountId 
    eNoteConfiguration:(DSESENoteConfiguration*) eNoteConfiguration
    completionHandler: (void (^)(DSESENoteConfiguration* output, NSError* error)) handler;

/// Update the password rules
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param accountPasswordRules  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountPasswordRules*
-(NSURLSessionTask*) updatePasswordRulesWithAccountId:
    (NSString*) accountId 
    accountPasswordRules:(DSESAccountPasswordRules*) accountPasswordRules
    completionHandler: (void (^)(DSESAccountPasswordRules* output, NSError* error)) handler;

/// Updates a permission profile within the specified account.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param permissionProfileId 
///
/// @param permissionProfile  
/// @param DSESAccountsApi_UpdatePermissionProfileOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESPermissionProfile*
-(NSURLSessionTask*) updatePermissionProfileWithAccountId:
    (NSString*) accountId 
    permissionProfileId:(NSString*) permissionProfileId 
    permissionProfile:(DSESPermissionProfile*) permissionProfile
    options:(DSESAccountsApi_UpdatePermissionProfileOptions*) options
    completionHandler: (void (^)(DSESPermissionProfile* output, NSError* error)) handler;

/// Updates the account settings for an account.
/// Updates the account settings for the specified account.
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param accountSettingsInformation  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) updateSettingsWithAccountId:
    (NSString*) accountId 
    accountSettingsInformation:(DSESAccountSettingsInformation*) accountSettingsInformation
    completionHandler: (void (^)(NSError* error)) handler;

/// Reserved: Sets the shared access information for users.
/// Reserved: Sets the shared access information for one or more users.
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param accountSharedAccess  
/// @param DSESAccountsApi_UpdateSharedAccessOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountSharedAccess*
-(NSURLSessionTask*) updateSharedAccessWithAccountId:
    (NSString*) accountId 
    accountSharedAccess:(DSESAccountSharedAccess*) accountSharedAccess
    options:(DSESAccountsApi_UpdateSharedAccessOptions*) options
    completionHandler: (void (^)(DSESAccountSharedAccess* output, NSError* error)) handler;

/// Update watermark information.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param watermark  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESWatermark*
-(NSURLSessionTask*) updateWatermarkWithAccountId:
    (NSString*) accountId 
    watermark:(DSESWatermark*) watermark
    completionHandler: (void (^)(DSESWatermark* output, NSError* error)) handler;


@end
