#import <Foundation/Foundation.h>
#import <DSESAccountIdentityVerificationResponse.h>
#import <DSESAccountSignature.h>
#import <DSESAccountSignatureDefinition.h>
#import <DSESAccountSignaturesInformation.h>
#import <DSESBccEmailArchive.h>
#import <DSESBccEmailArchiveHistoryList.h>
#import <DSESBccEmailArchiveList.h>
#import <DSESBulkSendBatchStatus.h>
#import <DSESBulkSendBatchSummaries.h>
#import <DSESBulkSendRequest.h>
#import <DSESBulkSendResponse.h>
#import <DSESBulkSendTestResponse.h>
#import <DSESBulkSendingList.h>
#import <DSESBulkSendingListSummaries.h>
#import <DSESCommentHistoryResult.h>
#import <DSESCommentsPublish.h>
#import <DSESCorrectViewRequest.h>
#import <DSESDocumentHtmlDefinition.h>
#import <DSESDocumentHtmlDefinitionOriginals.h>
#import <DSESDocumentHtmlDefinitions.h>
#import <DSESDowngradRequestBillingInfoResponse.h>
#import <DSESDowngradeBillingPlanInformation.h>
#import <DSESDowngradePlanUpdateResponse.h>
#import <DSESEnvelopePurgeConfiguration.h>
#import <DSESEnvelopeTransferRule.h>
#import <DSESEnvelopeTransferRuleInformation.h>
#import <DSESEnvelopeTransferRuleRequest.h>
#import <DSESErrorDetails.h>
#import <DSESFavoriteTemplatesInfo.h>
#import <DSESNotary.h>
#import <DSESNotaryJurisdiction.h>
#import <DSESNotaryJurisdictionList.h>
#import <DSESNotaryResult.h>
#import <DSESNotificationDefaults.h>
#import <DSESProofServiceResourceToken.h>
#import <DSESProofServiceViewLink.h>
#import <DSESRecipientPreviewRequest.h>
#import <DSESRecipientViewRequest.h>
#import <DSESReportInProductCsvRunRequest.h>
#import <DSESReportInProductGet.h>
#import <DSESReportInProductList.h>
#import <DSESReportInProductRunRequest.h>
#import <DSESReportInProductRunResponse.h>
#import <DSESReportInProductSaveResponse.h>
#import <DSESTabs.h>
#import <DSESTemplateTabs.h>
#import <DSESViewUrl.h>
#import <DSESWorkflow.h>
#import <DSESApi.h>

/**
* DocuSign REST API
* The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
*
* OpenAPI spec version: v2.1
* Contact: devcenter@docusign.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface DSESUncategorizedApi_CreateAccountSignaturesOptions : DSESObject 
    /*
    * decodeOnly 
    */
    @property NSString* decodeOnly;
@end

@interface DSESUncategorizedApi_GetAccountSignatureImageOptions : DSESObject 
    /*
    * includeChrome 
    */
    @property NSString* includeChrome;
@end

@interface DSESUncategorizedApi_GetAccountSignaturesOptions : DSESObject 
    /*
    * stampFormat 
    */
    @property NSString* stampFormat;

    /*
    * stampName 
    */
    @property NSString* stampName;

    /*
    * stampType 
    */
    @property NSString* stampType;
@end

@interface DSESUncategorizedApi_GetBCCEmailArchiveHistoryListOptions : DSESObject 
    /*
    * count 
    */
    @property NSString* count;

    /*
    * startPosition 
    */
    @property NSString* startPosition;
@end

@interface DSESUncategorizedApi_GetBCCEmailArchiveListOptions : DSESObject 
    /*
    * count 
    */
    @property NSString* count;

    /*
    * startPosition 
    */
    @property NSString* startPosition;
@end

@interface DSESUncategorizedApi_GetBulkSendBatchesOptions : DSESObject 
    /*
    * batchIds 
    */
    @property NSString* batchIds;

    /*
    * count 
    */
    @property NSString* count;

    /*
    * startPosition 
    */
    @property NSString* startPosition;

    /*
    * status 
    */
    @property NSString* status;
@end

@interface DSESUncategorizedApi_GetCommentsTranscriptOptions : DSESObject 
    /*
    * encoding 
    */
    @property NSString* encoding;
@end

@interface DSESUncategorizedApi_GetEnvelopeTransferRulesOptions : DSESObject 
    /*
    * count 
    */
    @property NSString* count;

    /*
    * startPosition 
    */
    @property NSString* startPosition;
@end

@interface DSESUncategorizedApi_GetNotaryOptions : DSESObject 
    /*
    * includeJurisdictions 
    */
    @property NSString* includeJurisdictions;
@end

@interface DSESUncategorizedApi_UpdateAccountSignatureByIdOptions : DSESObject 
    /*
    * closeExistingSignature 
    */
    @property NSString* closeExistingSignature;
@end

@interface DSESUncategorizedApi_UpdateAccountSignatureImageOptions : DSESObject 
    /*
    * transparentPng 
    */
    @property NSString* transparentPng;
@end


@interface DSESUncategorizedApi: NSObject <DSESApi>

extern NSString* kDSESUncategorizedApiErrorDomain;
extern NSInteger kDSESUncategorizedApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(DSESApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Adds/updates one or more account signatures. This request may include images in multi-part format.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param accountSignaturesInformation  
/// @param DSESUncategorizedApi_CreateAccountSignaturesOptions Options for modifying the request.
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountSignaturesInformation*
-(NSURLSessionTask*) createAccountSignaturesWithAccountId:
    (NSString*) accountId 
    accountSignaturesInformation:(DSESAccountSignaturesInformation*) accountSignaturesInformation
    options:(DSESUncategorizedApi_CreateAccountSignaturesOptions*) options
    completionHandler: (void (^)(DSESAccountSignaturesInformation* output, NSError* error)) handler;

/// Creates a blind carbon copy email archive entry
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param bccEmailArchive  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBccEmailArchive*
-(NSURLSessionTask*) createBCCEmailArchiveWithAccountId:
    (NSString*) accountId 
    bccEmailArchive:(DSESBccEmailArchive*) bccEmailArchive
    completionHandler: (void (^)(DSESBccEmailArchive* output, NSError* error)) handler;

/// Creates a new bulk send list
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param bulkSendingList  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBulkSendingList*
-(NSURLSessionTask*) createBulkSendListWithAccountId:
    (NSString*) accountId 
    bulkSendingList:(DSESBulkSendingList*) bulkSendingList
    completionHandler: (void (^)(DSESBulkSendingList* output, NSError* error)) handler;

/// Uses the specified bulk send list to send the envelope specified in the payload
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param bulkSendListId 
///
/// @param bulkSendRequest  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBulkSendResponse*
-(NSURLSessionTask*) createBulkSendRequestWithAccountId:
    (NSString*) accountId 
    bulkSendListId:(NSString*) bulkSendListId 
    bulkSendRequest:(DSESBulkSendRequest*) bulkSendRequest
    completionHandler: (void (^)(DSESBulkSendResponse* output, NSError* error)) handler;

/// Tests whether the specified bulk sending list can be used to send an envelope
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param bulkSendListId 
///
/// @param bulkSendRequest  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBulkSendTestResponse*
-(NSURLSessionTask*) createBulkSendTestRequestWithAccountId:
    (NSString*) accountId 
    bulkSendListId:(NSString*) bulkSendListId 
    bulkSendRequest:(DSESBulkSendRequest*) bulkSendRequest
    completionHandler: (void (^)(DSESBulkSendTestResponse* output, NSError* error)) handler;

/// Get Responsive HTML Preview for a document in an envelope.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
/// @param documentId The ID of the document being accessed.
///
/// @param documentHtmlDefinition  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDocumentHtmlDefinitions*
-(NSURLSessionTask*) createDocumentResponsiveHtmlPreviewWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    documentId:(NSString*) documentId 
    documentHtmlDefinition:(DSESDocumentHtmlDefinition*) documentHtmlDefinition
    completionHandler: (void (^)(DSESDocumentHtmlDefinitions* output, NSError* error)) handler;

/// Adds the tabs to an envelope document
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
/// @param documentId The ID of the document being accessed.
///
/// @param tabs  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTabs*
-(NSURLSessionTask*) createDocumentTabsWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    documentId:(NSString*) documentId 
    tabs:(DSESTabs*) tabs
    completionHandler: (void (^)(DSESTabs* output, NSError* error)) handler;

/// Posts a list of comments for authorized user
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
///
/// @param commentsPublish  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESCommentHistoryResult*
-(NSURLSessionTask*) createEnvelopeCommentsWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    commentsPublish:(DSESCommentsPublish*) commentsPublish
    completionHandler: (void (^)(DSESCommentHistoryResult* output, NSError* error)) handler;

/// Provides a URL to start a recipient view of the Envelope UI
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
///
/// @param recipientPreviewRequest  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESViewUrl*
-(NSURLSessionTask*) createEnvelopeRecipientPreviewWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    recipientPreviewRequest:(DSESRecipientPreviewRequest*) recipientPreviewRequest
    completionHandler: (void (^)(DSESViewUrl* output, NSError* error)) handler;

/// Provides a URL to start a shared recipient view of the Envelope UI
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
///
/// @param recipientViewRequest  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESViewUrl*
-(NSURLSessionTask*) createEnvelopeRecipientSharedViewWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    recipientViewRequest:(DSESRecipientViewRequest*) recipientViewRequest
    completionHandler: (void (^)(DSESViewUrl* output, NSError* error)) handler;

/// Add envelope transfer rules to an account.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param envelopeTransferRuleRequest  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESEnvelopeTransferRuleInformation*
-(NSURLSessionTask*) createEnvelopeTransferRulesWithAccountId:
    (NSString*) accountId 
    envelopeTransferRuleRequest:(DSESEnvelopeTransferRuleRequest*) envelopeTransferRuleRequest
    completionHandler: (void (^)(DSESEnvelopeTransferRuleInformation* output, NSError* error)) handler;

/// Add a notary to the system
/// 
///
///
/// @param notary  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESNotary*
-(NSURLSessionTask*) createNotaryWithNotary:
    (DSESNotary*) notary
    completionHandler: (void (^)(DSESNotary* output, NSError* error)) handler;

/// Add a notary jurisdiction to the system
/// 
///
///
/// @param notaryJurisdiction  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESNotaryJurisdiction*
-(NSURLSessionTask*) createNotaryJurisdictionsWithNotaryJurisdiction:
    (DSESNotaryJurisdiction*) notaryJurisdiction
    completionHandler: (void (^)(DSESNotaryJurisdiction* output, NSError* error)) handler;

/// Returns a link to access to the identity events stored in the proof service related to this recipient.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
/// @param recipientId The ID of the recipient being accessed.
///
///
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESProofServiceViewLink*
-(NSURLSessionTask*) createRecipientProofFileLinkWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    recipientId:(NSString*) recipientId 
    completionHandler: (void (^)(DSESProofServiceViewLink* output, NSError* error)) handler;

/// Returns a resource token to get access to the identity events stored in the proof service related to this recipient.
/// 
///
/// @param tokenScopes 
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
/// @param recipientId The ID of the recipient being accessed.
///
///
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESProofServiceResourceToken*
-(NSURLSessionTask*) createRecipientProofFileResourceTokenWithTokenScopes:
    (NSString*) tokenScopes 
    accountId:(NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    recipientId:(NSString*) recipientId 
    completionHandler: (void (^)(DSESProofServiceResourceToken* output, NSError* error)) handler;

/// Creates a customized report
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param reportInProductRunRequest  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESReportInProductSaveResponse*
-(NSURLSessionTask*) createReportInProductCreateWithAccountId:
    (NSString*) accountId 
    reportInProductRunRequest:(DSESReportInProductRunRequest*) reportInProductRunRequest
    completionHandler: (void (^)(DSESReportInProductSaveResponse* output, NSError* error)) handler;

/// Get Responsive HTML Preview for all documents in an envelope.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
///
/// @param documentHtmlDefinition  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDocumentHtmlDefinitions*
-(NSURLSessionTask*) createResponsiveHtmlPreviewWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    documentHtmlDefinition:(DSESDocumentHtmlDefinition*) documentHtmlDefinition
    completionHandler: (void (^)(DSESDocumentHtmlDefinitions* output, NSError* error)) handler;

/// Post Responsive HTML Preview for a document in a template.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
///
/// @param documentHtmlDefinition  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDocumentHtmlDefinitions*
-(NSURLSessionTask*) createTemplateDocumentResponsiveHtmlPreviewWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    documentHtmlDefinition:(DSESDocumentHtmlDefinition*) documentHtmlDefinition
    completionHandler: (void (^)(DSESDocumentHtmlDefinitions* output, NSError* error)) handler;

/// Adds the tabs to a tempate
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
///
/// @param templateTabs  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTabs*
-(NSURLSessionTask*) createTemplateDocumentTabsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    templateTabs:(DSESTemplateTabs*) templateTabs
    completionHandler: (void (^)(DSESTabs* output, NSError* error)) handler;

/// Provides a URL to start a recipient view of the Envelope UI
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param recipientPreviewRequest  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESViewUrl*
-(NSURLSessionTask*) createTemplateRecipientPreviewWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    recipientPreviewRequest:(DSESRecipientPreviewRequest*) recipientPreviewRequest
    completionHandler: (void (^)(DSESViewUrl* output, NSError* error)) handler;

/// Get Responsive HTML Preview for all documents in a template.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param documentHtmlDefinition  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDocumentHtmlDefinitions*
-(NSURLSessionTask*) createTemplateResponsiveHtmlPreviewWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentHtmlDefinition:(DSESDocumentHtmlDefinition*) documentHtmlDefinition
    completionHandler: (void (^)(DSESDocumentHtmlDefinitions* output, NSError* error)) handler;

/// Close the specified signature by Id.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param signatureId The ID of the signature being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteAccountSignatureWithAccountId:
    (NSString*) accountId 
    signatureId:(NSString*) signatureId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Deletes a signature, initials, or stamps image.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param signatureId The ID of the signature being accessed.
/// @param imageType One of **signature_image** or **initials_image**.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountSignature*
-(NSURLSessionTask*) deleteAccountSignatureImageWithAccountId:
    (NSString*) accountId 
    signatureId:(NSString*) signatureId 
    imageType:(NSString*) imageType 
    completionHandler: (void (^)(DSESAccountSignature* output, NSError* error)) handler;

/// Delete a blind carbon copy email archive for an account.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param bccEmailArchiveId 
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteBCCEmailArchiveWithAccountId:
    (NSString*) accountId 
    bccEmailArchiveId:(NSString*) bccEmailArchiveId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Deletes an existing bulk send list
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param bulkSendListId 
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBulkSendingListSummaries*
-(NSURLSessionTask*) deleteBulkSendListWithAccountId:
    (NSString*) accountId 
    bulkSendListId:(NSString*) bulkSendListId 
    completionHandler: (void (^)(DSESBulkSendingListSummaries* output, NSError* error)) handler;

/// Deletes tabs from an envelope document
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
/// @param documentId The ID of the document being accessed.
///
/// @param tabs  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTabs*
-(NSURLSessionTask*) deleteDocumentTabsWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    documentId:(NSString*) documentId 
    tabs:(DSESTabs*) tabs
    completionHandler: (void (^)(DSESTabs* output, NSError* error)) handler;

/// Revokes the correction view URL to the Envelope UI
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
///
/// @param correctViewRequest  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteEnvelopeCorrectViewWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    correctViewRequest:(DSESCorrectViewRequest*) correctViewRequest
    completionHandler: (void (^)(NSError* error)) handler;

/// Delete envelope transfer rules for an account.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeTransferRuleId 
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteEnvelopeTransferRulesWithAccountId:
    (NSString*) accountId 
    envelopeTransferRuleId:(NSString*) envelopeTransferRuleId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Delete the workflow definition for an envelope.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteEnvelopeWorkflowDefinitionWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Delete a notary jurisdiction a specified user.
/// 
///
/// @param jurisdictionId 
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteNotaryJurisdictionWithJurisdictionId:
    (NSString*) jurisdictionId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Retrieves org level report by correlation id and site.
/// 
///
/// @param organizationId 
/// @param reportCorrelationId 
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteReportWithOrganizationId:
    (NSString*) organizationId 
    reportCorrelationId:(NSString*) reportCorrelationId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Removes a customized report
/// 
///
/// @param _id 
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESReportInProductSaveResponse*
-(NSURLSessionTask*) deleteReportInProductWithId:
    (NSString*) _id 
    accountId:(NSString*) accountId 
    completionHandler: (void (^)(DSESReportInProductSaveResponse* output, NSError* error)) handler;

/// Deletes tabs from an envelope document
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
///
/// @param templateTabs  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTabs*
-(NSURLSessionTask*) deleteTemplateDocumentTabsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    templateTabs:(DSESTemplateTabs*) templateTabs
    completionHandler: (void (^)(DSESTabs* output, NSError* error)) handler;

/// Delete the workflow definition for a template.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteTemplateWorkflowDefinitionWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Get the list of identity verification options for an account
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountIdentityVerificationResponse*
-(NSURLSessionTask*) getAccountIdentityVerificationWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESAccountIdentityVerificationResponse* output, NSError* error)) handler;

/// Returns information about a single signature by specifed signatureId.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param signatureId The ID of the signature being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountSignature*
-(NSURLSessionTask*) getAccountSignatureWithAccountId:
    (NSString*) accountId 
    signatureId:(NSString*) signatureId 
    completionHandler: (void (^)(DSESAccountSignature* output, NSError* error)) handler;

/// Returns a signature, initials, or stamps image.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param signatureId The ID of the signature being accessed.
/// @param imageType One of **signature_image** or **initials_image**.
///
///
/// @param DSESUncategorizedApi_GetAccountSignatureImageOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return NSURL*
-(NSURLSessionTask*) getAccountSignatureImageWithAccountId:
    (NSString*) accountId 
    signatureId:(NSString*) signatureId 
    imageType:(NSString*) imageType 
    options:(DSESUncategorizedApi_GetAccountSignatureImageOptions*) options
    completionHandler: (void (^)(NSURL* output, NSError* error)) handler;

/// Returns the managed signature definitions for the account
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
/// @param DSESUncategorizedApi_GetAccountSignaturesOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountSignaturesInformation*
-(NSURLSessionTask*) getAccountSignaturesWithAccountId:
    (NSString*) accountId 
    options:(DSESUncategorizedApi_GetAccountSignaturesOptions*) options
    completionHandler: (void (^)(DSESAccountSignaturesInformation* output, NSError* error)) handler;

/// Get the blind carbon copy email archive history entries for the specified archive
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param bccEmailArchiveId 
///
///
/// @param DSESUncategorizedApi_GetBCCEmailArchiveHistoryListOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBccEmailArchiveHistoryList*
-(NSURLSessionTask*) getBCCEmailArchiveHistoryListWithAccountId:
    (NSString*) accountId 
    bccEmailArchiveId:(NSString*) bccEmailArchiveId 
    options:(DSESUncategorizedApi_GetBCCEmailArchiveHistoryListOptions*) options
    completionHandler: (void (^)(DSESBccEmailArchiveHistoryList* output, NSError* error)) handler;

/// Get the blind carbon copy email archive entries owned by the specified account
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
/// @param DSESUncategorizedApi_GetBCCEmailArchiveListOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBccEmailArchiveList*
-(NSURLSessionTask*) getBCCEmailArchiveListWithAccountId:
    (NSString*) accountId 
    options:(DSESUncategorizedApi_GetBCCEmailArchiveListOptions*) options
    completionHandler: (void (^)(DSESBccEmailArchiveList* output, NSError* error)) handler;

/// Gets a specific bulk send batch status
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param bulkSendBatchId 
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBulkSendBatchStatus*
-(NSURLSessionTask*) getBulkSendBatchStatusWithAccountId:
    (NSString*) accountId 
    bulkSendBatchId:(NSString*) bulkSendBatchId 
    completionHandler: (void (^)(DSESBulkSendBatchStatus* output, NSError* error)) handler;

/// Returns a list of bulk send batch satuses initiated by account.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
/// @param DSESUncategorizedApi_GetBulkSendBatchesOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBulkSendBatchSummaries*
-(NSURLSessionTask*) getBulkSendBatchesWithAccountId:
    (NSString*) accountId 
    options:(DSESUncategorizedApi_GetBulkSendBatchesOptions*) options
    completionHandler: (void (^)(DSESBulkSendBatchSummaries* output, NSError* error)) handler;

/// Gets a specific bulk send list
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param bulkSendListId 
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBulkSendingList*
-(NSURLSessionTask*) getBulkSendListWithAccountId:
    (NSString*) accountId 
    bulkSendListId:(NSString*) bulkSendListId 
    completionHandler: (void (^)(DSESBulkSendingList* output, NSError* error)) handler;

/// Lists top-level details for all bulk send lists visible to the current user
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBulkSendingListSummaries*
-(NSURLSessionTask*) getBulkSendListsWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESBulkSendingListSummaries* output, NSError* error)) handler;

/// Gets comment transcript for envelope and user
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
///
///
/// @param DSESUncategorizedApi_GetCommentsTranscriptOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return NSURL*
-(NSURLSessionTask*) getCommentsTranscriptWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    options:(DSESUncategorizedApi_GetCommentsTranscriptOptions*) options
    completionHandler: (void (^)(NSURL* output, NSError* error)) handler;

/// Retrieves a Datafeed element by Id.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param dataFeedElementId 
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) getDataFeedElementWithAccountId:
    (NSString*) accountId 
    dataFeedElementId:(NSString*) dataFeedElementId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Returns downgrade plan information for the specified account.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDowngradRequestBillingInfoResponse*
-(NSURLSessionTask*) getDowngradeRequestBillingInfoWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESDowngradRequestBillingInfoResponse* output, NSError* error)) handler;

/// Get the Original HTML Definition used to generate the Responsive HTML for a given document.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
/// @param documentId The ID of the document being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDocumentHtmlDefinitionOriginals*
-(NSURLSessionTask*) getEnvelopeDocumentHtmlDefinitionsWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    documentId:(NSString*) documentId 
    completionHandler: (void (^)(DSESDocumentHtmlDefinitionOriginals* output, NSError* error)) handler;

/// Get the Original HTML Definition used to generate the Responsive HTML for the envelope.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDocumentHtmlDefinitionOriginals*
-(NSURLSessionTask*) getEnvelopeHtmlDefinitionsWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    completionHandler: (void (^)(DSESDocumentHtmlDefinitionOriginals* output, NSError* error)) handler;

/// Select envelope purge configuration.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESEnvelopePurgeConfiguration*
-(NSURLSessionTask*) getEnvelopePurgeConfigurationWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESEnvelopePurgeConfiguration* output, NSError* error)) handler;

/// Returns a list of envelope transfer rules in the specified account.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
/// @param DSESUncategorizedApi_GetEnvelopeTransferRulesOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESEnvelopeTransferRuleInformation*
-(NSURLSessionTask*) getEnvelopeTransferRulesWithAccountId:
    (NSString*) accountId 
    options:(DSESUncategorizedApi_GetEnvelopeTransferRulesOptions*) options
    completionHandler: (void (^)(DSESEnvelopeTransferRuleInformation* output, NSError* error)) handler;

/// Returns the workflow definition for an envelope.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESWorkflow*
-(NSURLSessionTask*) getEnvelopeWorkflowDefinitionWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    completionHandler: (void (^)(DSESWorkflow* output, NSError* error)) handler;

/// Retrieves the list of favorited templates for this caller
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESFavoriteTemplatesInfo*
-(NSURLSessionTask*) getFavoriteTemplatesWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESFavoriteTemplatesInfo* output, NSError* error)) handler;

/// Get notary settings for a user
/// 
///
///
///
/// @param DSESUncategorizedApi_GetNotaryOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESNotaryResult*
-(NSURLSessionTask*) getNotaryWithIncludeJurisdictions:
    (DSESUncategorizedApi_GetNotaryOptions*) options
    completionHandler: (void (^)(DSESNotaryResult* output, NSError* error)) handler;

/// Get notary a jurisdiction for a user
/// 
///
/// @param jurisdictionId 
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESNotaryJurisdiction*
-(NSURLSessionTask*) getNotaryJurisdictionWithJurisdictionId:
    (NSString*) jurisdictionId 
    completionHandler: (void (^)(DSESNotaryJurisdiction* output, NSError* error)) handler;

/// Get notary seal for a jurisdiction
/// 
///
/// @param jurisdictionId 
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) getNotaryJurisdictionSealWithJurisdictionId:
    (NSString*) jurisdictionId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Get notary jurisdictions for a user
/// 
///
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESNotaryJurisdictionList*
-(NSURLSessionTask*) getNotaryJurisdictionsWithCompletionHandler: (void (^)(DSESNotaryJurisdictionList* output, NSError* error)) handler;

/// Returns default user level settings for a specified account
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESNotificationDefaults*
-(NSURLSessionTask*) getNotificationDefaultsWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESNotificationDefaults* output, NSError* error)) handler;

/// Retrieves org level report by correlation id and site.
/// 
///
/// @param organizationId 
/// @param reportCorrelationId 
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) getReportWithOrganizationId:
    (NSString*) organizationId 
    reportCorrelationId:(NSString*) reportCorrelationId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Gets the specified report
/// 
///
/// @param _id 
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESReportInProductGet*
-(NSURLSessionTask*) getReportInProductWithId:
    (NSString*) _id 
    accountId:(NSString*) accountId 
    completionHandler: (void (^)(DSESReportInProductGet* output, NSError* error)) handler;

/// Gets the descriptors for all of an account's active reports (for listings)
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESReportInProductList*
-(NSURLSessionTask*) getReportInProductListWithAccountId:
    (NSString*) accountId 
    completionHandler: (void (^)(DSESReportInProductList* output, NSError* error)) handler;

/// Get encrypted tabs for envelope.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) getTabsBlobWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Get the Original HTML Definition used to generate the Responsive HTML for a given document in a template.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDocumentHtmlDefinitionOriginals*
-(NSURLSessionTask*) getTemplateDocumentHtmlDefinitionsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    completionHandler: (void (^)(DSESDocumentHtmlDefinitionOriginals* output, NSError* error)) handler;

/// Get the Original HTML Definition used to generate the Responsive HTML for the template.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDocumentHtmlDefinitionOriginals*
-(NSURLSessionTask*) getTemplateHtmlDefinitionsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    completionHandler: (void (^)(DSESDocumentHtmlDefinitionOriginals* output, NSError* error)) handler;

/// Returns the workflow definition for a template.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESWorkflow*
-(NSURLSessionTask*) getTemplateWorkflowDefinitionWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    completionHandler: (void (^)(DSESWorkflow* output, NSError* error)) handler;

/// Unfavorite a template
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param favoriteTemplatesInfo  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESFavoriteTemplatesInfo*
-(NSURLSessionTask*) unFavoriteTemplateWithAccountId:
    (NSString*) accountId 
    favoriteTemplatesInfo:(DSESFavoriteTemplatesInfo*) favoriteTemplatesInfo
    completionHandler: (void (^)(DSESFavoriteTemplatesInfo* output, NSError* error)) handler;

/// Updates a account signature.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param accountSignaturesInformation  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountSignaturesInformation*
-(NSURLSessionTask*) updateAccountSignatureWithAccountId:
    (NSString*) accountId 
    accountSignaturesInformation:(DSESAccountSignaturesInformation*) accountSignaturesInformation
    completionHandler: (void (^)(DSESAccountSignaturesInformation* output, NSError* error)) handler;

/// Updates a account signature.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param signatureId The ID of the signature being accessed.
///
/// @param accountSignatureDefinition  
/// @param DSESUncategorizedApi_UpdateAccountSignatureByIdOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountSignature*
-(NSURLSessionTask*) updateAccountSignatureByIdWithAccountId:
    (NSString*) accountId 
    signatureId:(NSString*) signatureId 
    accountSignatureDefinition:(DSESAccountSignatureDefinition*) accountSignatureDefinition
    options:(DSESUncategorizedApi_UpdateAccountSignatureByIdOptions*) options
    completionHandler: (void (^)(DSESAccountSignature* output, NSError* error)) handler;

/// Sets a signature, initials, or stamps image.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param signatureId The ID of the signature being accessed.
/// @param imageType One of **signature_image** or **initials_image**.
///
///
/// @param DSESUncategorizedApi_UpdateAccountSignatureImageOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESAccountSignature*
-(NSURLSessionTask*) updateAccountSignatureImageWithAccountId:
    (NSString*) accountId 
    signatureId:(NSString*) signatureId 
    imageType:(NSString*) imageType 
    options:(DSESUncategorizedApi_UpdateAccountSignatureImageOptions*) options
    completionHandler: (void (^)(DSESAccountSignature* output, NSError* error)) handler;

/// Updates an existing bulk send list.  If send_envelope query string value is provided, will accept an empty payload and try to send the specified envelope
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param bulkSendListId 
///
/// @param bulkSendingList  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBulkSendingList*
-(NSURLSessionTask*) updateBulkSendListWithAccountId:
    (NSString*) accountId 
    bulkSendListId:(NSString*) bulkSendListId 
    bulkSendingList:(DSESBulkSendingList*) bulkSendingList
    completionHandler: (void (^)(DSESBulkSendingList* output, NSError* error)) handler;

/// Updates the tabs for an envelope document
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
/// @param documentId The ID of the document being accessed.
///
/// @param tabs  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTabs*
-(NSURLSessionTask*) updateDocumentTabsWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    documentId:(NSString*) documentId 
    tabs:(DSESTabs*) tabs
    completionHandler: (void (^)(DSESTabs* output, NSError* error)) handler;

/// Queues downgrade billing plan request for an account.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param downgradeBillingPlanInformation  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDowngradePlanUpdateResponse*
-(NSURLSessionTask*) updateDowngradeAccountBillingPlanWithAccountId:
    (NSString*) accountId 
    downgradeBillingPlanInformation:(DSESDowngradeBillingPlanInformation*) downgradeBillingPlanInformation
    completionHandler: (void (^)(DSESDowngradePlanUpdateResponse* output, NSError* error)) handler;

/// Updates envelope purge configuration.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param envelopePurgeConfiguration  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESEnvelopePurgeConfiguration*
-(NSURLSessionTask*) updateEnvelopePurgeConfigurationWithAccountId:
    (NSString*) accountId 
    envelopePurgeConfiguration:(DSESEnvelopePurgeConfiguration*) envelopePurgeConfiguration
    completionHandler: (void (^)(DSESEnvelopePurgeConfiguration* output, NSError* error)) handler;

/// Update an envelope transfer rule for an account.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeTransferRuleId 
///
/// @param envelopeTransferRule  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESEnvelopeTransferRule*
-(NSURLSessionTask*) updateEnvelopeTransferRuleWithAccountId:
    (NSString*) accountId 
    envelopeTransferRuleId:(NSString*) envelopeTransferRuleId 
    envelopeTransferRule:(DSESEnvelopeTransferRule*) envelopeTransferRule
    completionHandler: (void (^)(DSESEnvelopeTransferRule* output, NSError* error)) handler;

/// Update envelope transfer rules for an account.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param envelopeTransferRuleInformation  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESEnvelopeTransferRuleInformation*
-(NSURLSessionTask*) updateEnvelopeTransferRulesWithAccountId:
    (NSString*) accountId 
    envelopeTransferRuleInformation:(DSESEnvelopeTransferRuleInformation*) envelopeTransferRuleInformation
    completionHandler: (void (^)(DSESEnvelopeTransferRuleInformation* output, NSError* error)) handler;

/// Updates the envelope workflow definition for an envelope.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
///
/// @param workflow  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESWorkflow*
-(NSURLSessionTask*) updateEnvelopeWorkflowDefinitionWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    workflow:(DSESWorkflow*) workflow
    completionHandler: (void (^)(DSESWorkflow* output, NSError* error)) handler;

/// Favorites a template
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param favoriteTemplatesInfo  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESFavoriteTemplatesInfo*
-(NSURLSessionTask*) updateFavoriteTemplateWithAccountId:
    (NSString*) accountId 
    favoriteTemplatesInfo:(DSESFavoriteTemplatesInfo*) favoriteTemplatesInfo
    completionHandler: (void (^)(DSESFavoriteTemplatesInfo* output, NSError* error)) handler;

/// Update a notary
/// 
///
///
/// @param notary  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESNotary*
-(NSURLSessionTask*) updateNotaryWithNotary:
    (DSESNotary*) notary
    completionHandler: (void (^)(DSESNotary* output, NSError* error)) handler;

/// Update a notary jurisdiction
/// 
///
/// @param jurisdictionId 
///
/// @param notaryJurisdiction  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESNotaryJurisdiction*
-(NSURLSessionTask*) updateNotaryJurisdictionWithJurisdictionId:
    (NSString*) jurisdictionId 
    notaryJurisdiction:(DSESNotaryJurisdiction*) notaryJurisdiction
    completionHandler: (void (^)(DSESNotaryJurisdiction* output, NSError* error)) handler;

/// Updates default user level settings for a specified account
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param notificationDefaults  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESNotificationDefaults*
-(NSURLSessionTask*) updateNotificationDefaultsWithAccountId:
    (NSString*) accountId 
    notificationDefaults:(DSESNotificationDefaults*) notificationDefaults
    completionHandler: (void (^)(DSESNotificationDefaults* output, NSError* error)) handler;

/// Returns the result set from running the specified report
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param reportInProductRunRequest  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESReportInProductRunResponse*
-(NSURLSessionTask*) updateReportInProductRunResultsWithAccountId:
    (NSString*) accountId 
    reportInProductRunRequest:(DSESReportInProductRunRequest*) reportInProductRunRequest
    completionHandler: (void (^)(DSESReportInProductRunResponse* output, NSError* error)) handler;

/// Saves a customized report
/// 
///
/// @param _id 
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param reportInProductRunRequest  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESReportInProductSaveResponse*
-(NSURLSessionTask*) updateReportInProductSaveWithId:
    (NSString*) _id 
    accountId:(NSString*) accountId 
    reportInProductRunRequest:(DSESReportInProductRunRequest*) reportInProductRunRequest
    completionHandler: (void (^)(DSESReportInProductSaveResponse* output, NSError* error)) handler;

/// Returns the specified report as a CSV string
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param reportInProductCsvRunRequest  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) updateReportResultsCsvWithAccountId:
    (NSString*) accountId 
    reportInProductCsvRunRequest:(DSESReportInProductCsvRunRequest*) reportInProductCsvRunRequest
    completionHandler: (void (^)(NSError* error)) handler;

/// Update encrypted tabs for envelope.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param envelopeId The envelopeId Guid of the envelope being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) updateTabsBlobWithAccountId:
    (NSString*) accountId 
    envelopeId:(NSString*) envelopeId 
    completionHandler: (void (^)(NSError* error)) handler;

/// Updates the tabs for a template
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
///
/// @param templateTabs  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTabs*
-(NSURLSessionTask*) updateTemplateDocumentTabsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    templateTabs:(DSESTemplateTabs*) templateTabs
    completionHandler: (void (^)(DSESTabs* output, NSError* error)) handler;

/// Updates the workflow definition for a template.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param workflow  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESWorkflow*
-(NSURLSessionTask*) updateTemplateWorkflowDefinitionWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    workflow:(DSESWorkflow*) workflow
    completionHandler: (void (^)(DSESWorkflow* output, NSError* error)) handler;


@end
