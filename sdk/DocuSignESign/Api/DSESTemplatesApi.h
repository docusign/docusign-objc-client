#import <Foundation/Foundation.h>
#import <DSESBulkRecipientsRequest.h>
#import <DSESBulkRecipientsResponse.h>
#import <DSESBulkRecipientsSummaryResponse.h>
#import <DSESBulkRecipientsUpdateResponse.h>
#import <DSESCustomFields.h>
#import <DSESDocumentFieldsInformation.h>
#import <DSESEnvelopeDefinition.h>
#import <DSESEnvelopeDocument.h>
#import <DSESEnvelopeTemplate.h>
#import <DSESEnvelopeTemplateResults.h>
#import <DSESErrorDetails.h>
#import <DSESGroupInformation.h>
#import <DSESLockInformation.h>
#import <DSESLockRequest.h>
#import <DSESNotification.h>
#import <DSESPageImages.h>
#import <DSESPageRequest.h>
#import <DSESRecipients.h>
#import <DSESRecipientsUpdateSummary.h>
#import <DSESReturnUrlRequest.h>
#import <DSESTabs.h>
#import <DSESTemplateCustomFields.h>
#import <DSESTemplateDocumentsResult.h>
#import <DSESTemplateNotificationRequest.h>
#import <DSESTemplateRecipients.h>
#import <DSESTemplateSummary.h>
#import <DSESTemplateTabs.h>
#import <DSESTemplateUpdateSummary.h>
#import <DSESViewUrl.h>
#import <DSESApi.h>

/**
* DocuSign REST API
* The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
*
* OpenAPI spec version: v2.1
* Contact: devcenter@docusign.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface DSESTemplatesApi_CreateRecipientsOptions : DSESObject 
    /*
    * resendEnvelope 
    */
    @property NSString* resendEnvelope;
@end

@interface DSESTemplatesApi_GetOptions : DSESObject 
    /*
    * include 
    */
    @property NSString* include;
@end

@interface DSESTemplatesApi_GetDocumentOptions : DSESObject 
    /*
    * encrypt 
    */
    @property NSString* encrypt;

    /*
    * showChanges 
    */
    @property NSString* showChanges;
@end

@interface DSESTemplatesApi_GetDocumentPageImageOptions : DSESObject 
    /*
    * dpi 
    */
    @property NSString* dpi;

    /*
    * maxHeight 
    */
    @property NSString* maxHeight;

    /*
    * maxWidth 
    */
    @property NSString* maxWidth;

    /*
    * showChanges 
    */
    @property NSString* showChanges;
@end

@interface DSESTemplatesApi_GetDocumentTabsOptions : DSESObject 
    /*
    * pageNumbers 
    */
    @property NSString* pageNumbers;
@end

@interface DSESTemplatesApi_GetPagesOptions : DSESObject 
    /*
    * count 
    */
    @property NSString* count;

    /*
    * dpi 
    */
    @property NSString* dpi;

    /*
    * maxHeight 
    */
    @property NSString* maxHeight;

    /*
    * maxWidth 
    */
    @property NSString* maxWidth;

    /*
    * nocache 
    */
    @property NSString* nocache;

    /*
    * showChanges 
    */
    @property NSString* showChanges;

    /*
    * startPosition 
    */
    @property NSString* startPosition;
@end

@interface DSESTemplatesApi_ListBulkRecipientsOptions : DSESObject 
    /*
    * includeTabs 
    */
    @property NSString* includeTabs;

    /*
    * startPosition 
    */
    @property NSString* startPosition;
@end

@interface DSESTemplatesApi_ListDocumentsOptions : DSESObject 
    /*
    * includeTabs 
    */
    @property NSString* includeTabs;
@end

@interface DSESTemplatesApi_ListRecipientsOptions : DSESObject 
    /*
    * includeAnchorTabLocations  When set to **true** and &#x60;include_tabs&#x60; is set to **true**, all tabs with anchor tab properties are included in the response. 
    */
    @property NSString* includeAnchorTabLocations;

    /*
    * includeExtended  When set to **true**, the extended properties are included in the response. 
    */
    @property NSString* includeExtended;

    /*
    * includeTabs When set to **true**, the tab information associated with the recipient is included in the response.
    */
    @property NSString* includeTabs;
@end

@interface DSESTemplatesApi_ListTabsOptions : DSESObject 
    /*
    * includeAnchorTabLocations When set to **true**, all tabs with anchor tab properties are included in the response. 
    */
    @property NSString* includeAnchorTabLocations;

    /*
    * includeMetadata 
    */
    @property NSString* includeMetadata;
@end

@interface DSESTemplatesApi_ListTemplatesOptions : DSESObject 
    /*
    * count Number of records to return in the cache.
    */
    @property NSString* count;

    /*
    * createdFromDate 
    */
    @property NSString* createdFromDate;

    /*
    * createdToDate 
    */
    @property NSString* createdToDate;

    /*
    * folderIds A comma separated list of folder ID GUIDs.
    */
    @property NSString* folderIds;

    /*
    * folderTypes 
    */
    @property NSString* folderTypes;

    /*
    * fromDate Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created.
    */
    @property NSString* fromDate;

    /*
    * include A comma separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications.
    */
    @property NSString* include;

    /*
    * isDownload 
    */
    @property NSString* isDownload;

    /*
    * modifiedFromDate 
    */
    @property NSString* modifiedFromDate;

    /*
    * modifiedToDate 
    */
    @property NSString* modifiedToDate;

    /*
    * order Sets the direction order used to sort the list. Valid values are: -asc &#x3D; ascending sort order (a to z)  -desc &#x3D; descending sort order (z to a)
    */
    @property NSString* order;

    /*
    * orderBy Sets the file attribute used to sort the list. Valid values are:  -name: template name  -modified: date/time template was last modified.  -used: date/time the template was last used.
    */
    @property NSString* orderBy;

    /*
    * searchFields 
    */
    @property NSString* searchFields;

    /*
    * searchText The search text used to search the names of templates.
    */
    @property NSString* searchText;

    /*
    * sharedByMe If true, the response only includes templates shared by the user. If false, the response only returns template not shared by the user. If not specified, the response is not affected.
    */
    @property NSString* sharedByMe;

    /*
    * startPosition The starting index for the first template shown in the response. This must be greater than or equal to 0 (zero).
    */
    @property NSString* startPosition;

    /*
    * templateIds 
    */
    @property NSString* templateIds;

    /*
    * toDate End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date.
    */
    @property NSString* toDate;

    /*
    * usedFromDate Start of the search date range. Only returns templates used or edited on or after this date/time. If no value is specified, there is no limit on the earliest date used.
    */
    @property NSString* usedFromDate;

    /*
    * usedToDate End of the search date range. Only returns templates used or edited up to this date/time. If no value is provided, this defaults to the current date.
    */
    @property NSString* usedToDate;

    /*
    * userFilter Sets if the templates shown in the response Valid values are:  -owned_by_me: only shows templates the user owns.  -shared_with_me: only shows templates that are shared with the user.  -all: shows all templates owned or shared with the user.
    */
    @property NSString* userFilter;

    /*
    * userId 
    */
    @property NSString* userId;
@end

@interface DSESTemplatesApi_UpdateDocumentOptions : DSESObject 
    /*
    * isEnvelopeDefinition 
    */
    @property NSString* isEnvelopeDefinition;
@end

@interface DSESTemplatesApi_UpdateRecipientsOptions : DSESObject 
    /*
    * resendEnvelope 
    */
    @property NSString* resendEnvelope;
@end


@interface DSESTemplatesApi: NSObject <DSESApi>

extern NSString* kDSESTemplatesApiErrorDomain;
extern NSInteger kDSESTemplatesApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(DSESApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Creates custom document fields in an existing template document.
/// Creates custom document fields in an existing template document.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param templateCustomFields  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESCustomFields*
-(NSURLSessionTask*) createCustomFieldsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    templateCustomFields:(DSESTemplateCustomFields*) templateCustomFields
    completionHandler: (void (^)(DSESCustomFields* output, NSError* error)) handler;

/// Creates custom document fields in an existing template document.
/// Creates custom document fields in an existing template document.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
///
/// @param documentFieldsInformation  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDocumentFieldsInformation*
-(NSURLSessionTask*) createDocumentFieldsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    documentFieldsInformation:(DSESDocumentFieldsInformation*) documentFieldsInformation
    completionHandler: (void (^)(DSESDocumentFieldsInformation* output, NSError* error)) handler;

/// Provides a URL to start an edit view of the Template UI
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param returnUrlRequest  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESViewUrl*
-(NSURLSessionTask*) createEditViewWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    returnUrlRequest:(DSESReturnUrlRequest*) returnUrlRequest
    completionHandler: (void (^)(DSESViewUrl* output, NSError* error)) handler;

/// Lock a template.
/// Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property `canLockEnvelopes` must be set to **true** for the user).
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param lockRequest  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESLockInformation*
-(NSURLSessionTask*) createLockWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    lockRequest:(DSESLockRequest*) lockRequest
    completionHandler: (void (^)(DSESLockInformation* output, NSError* error)) handler;

/// Adds tabs for a recipient.
/// Adds one or more recipients to a template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param templateRecipients  
/// @param DSESTemplatesApi_CreateRecipientsOptions Options for modifying the request.
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESRecipients*
-(NSURLSessionTask*) createRecipientsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    templateRecipients:(DSESTemplateRecipients*) templateRecipients
    options:(DSESTemplatesApi_CreateRecipientsOptions*) options
    completionHandler: (void (^)(DSESRecipients* output, NSError* error)) handler;

/// Adds tabs for a recipient.
/// Adds one or more tabs for a recipient.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param recipientId The ID of the recipient being accessed.
///
/// @param templateTabs  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTabs*
-(NSURLSessionTask*) createTabsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    recipientId:(NSString*) recipientId 
    templateTabs:(DSESTemplateTabs*) templateTabs
    completionHandler: (void (^)(DSESTabs* output, NSError* error)) handler;

/// Creates an envelope from a template.
/// Creates a template definition using a multipart request.  ###Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient's role name, are added to the `emailSubject` property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient's name in the subject line add the following text in the `emailSubject` property when creating the template or when sending an envelope from a template:  [[<roleName>_UserName]]  Example:  `\"emailSubject\":\"[[Signer 1_UserName]], Please sign this NDA\",`  To add a recipient's email address in the subject line add the following text in the `emailSubject` property when creating the template or when sending an envelope from a template:  [[<roleName>_Email]]  Example:  `\"emailSubject\":\"[[Signer 1_Email]], Please sign this NDA\",`   In both cases the <roleName> is the recipient's contents of the `roleName` property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then [[<roleName>_UserName]] or [[<roleName>_Email]] is shown in the email subject.
///
/// @param accountId The external account number (int) or account ID Guid.
///
/// @param envelopeTemplate  
///
///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTemplateSummary*
-(NSURLSessionTask*) createTemplateWithAccountId:
    (NSString*) accountId 
    envelopeTemplate:(DSESEnvelopeTemplate*) envelopeTemplate
    completionHandler: (void (^)(DSESTemplateSummary* output, NSError* error)) handler;

/// Deletes the bulk recipient list on a template.
/// Deletes the bulk recipient list on a template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param recipientId The ID of the recipient being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBulkRecipientsUpdateResponse*
-(NSURLSessionTask*) deleteBulkRecipientsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    recipientId:(NSString*) recipientId 
    completionHandler: (void (^)(DSESBulkRecipientsUpdateResponse* output, NSError* error)) handler;

/// Deletes envelope custom fields in a template.
/// Deletes envelope custom fields in a template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param templateCustomFields  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESCustomFields*
-(NSURLSessionTask*) deleteCustomFieldsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    templateCustomFields:(DSESTemplateCustomFields*) templateCustomFields
    completionHandler: (void (^)(DSESCustomFields* output, NSError* error)) handler;

/// Deletes custom document fields from an existing template document.
/// Deletes custom document fields from an existing template document.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
///
/// @param documentFieldsInformation  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDocumentFieldsInformation*
-(NSURLSessionTask*) deleteDocumentFieldsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    documentFieldsInformation:(DSESDocumentFieldsInformation*) documentFieldsInformation
    completionHandler: (void (^)(DSESDocumentFieldsInformation* output, NSError* error)) handler;

/// Deletes a page from a document in an template.
/// Deletes a page from a document in a template based on the page number.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
/// @param pageNumber The page number being accessed.
///
/// @param pageRequest  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) deleteDocumentPageWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    pageNumber:(NSString*) pageNumber 
    pageRequest:(DSESPageRequest*) pageRequest
    completionHandler: (void (^)(NSError* error)) handler;

/// Deletes documents from a template.
/// Deletes one or more documents from an existing template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param envelopeDefinition  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTemplateDocumentsResult*
-(NSURLSessionTask*) deleteDocumentsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    envelopeDefinition:(DSESEnvelopeDefinition*) envelopeDefinition
    completionHandler: (void (^)(DSESTemplateDocumentsResult* output, NSError* error)) handler;

/// Removes a member group's sharing permissions for a template.
/// Removes a member group's sharing permissions for a specified template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param templatePart Currently, the only defined part is **groups**.
///
/// @param groupInformation  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESGroupInformation*
-(NSURLSessionTask*) deleteGroupShareWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    templatePart:(NSString*) templatePart 
    groupInformation:(DSESGroupInformation*) groupInformation
    completionHandler: (void (^)(DSESGroupInformation* output, NSError* error)) handler;

/// Deletes a template lock.
/// Deletes the lock from the specified template. The `X-DocuSign-Edit` header must be included in the request.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param lockRequest  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESLockInformation*
-(NSURLSessionTask*) deleteLockWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    lockRequest:(DSESLockRequest*) lockRequest
    completionHandler: (void (^)(DSESLockInformation* output, NSError* error)) handler;

/// Deletes the specified recipient file from a template.
/// Deletes the specified recipient file from the specified template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param recipientId The ID of the recipient being accessed.
///
/// @param templateRecipients  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESRecipients*
-(NSURLSessionTask*) deleteRecipientWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    recipientId:(NSString*) recipientId 
    templateRecipients:(DSESTemplateRecipients*) templateRecipients
    completionHandler: (void (^)(DSESRecipients* output, NSError* error)) handler;

/// Deletes recipients from a template.
/// Deletes one or more recipients from a template. Recipients to be deleted are listed in the request, with the `recipientId` being used as the key for deleting recipients.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param templateRecipients  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESRecipients*
-(NSURLSessionTask*) deleteRecipientsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    templateRecipients:(DSESTemplateRecipients*) templateRecipients
    completionHandler: (void (^)(DSESRecipients* output, NSError* error)) handler;

/// Deletes the tabs associated with a recipient in a template.
/// Deletes one or more tabs associated with a recipient in a template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param recipientId The ID of the recipient being accessed.
///
/// @param templateTabs  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTabs*
-(NSURLSessionTask*) deleteTabsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    recipientId:(NSString*) recipientId 
    templateTabs:(DSESTemplateTabs*) templateTabs
    completionHandler: (void (^)(DSESTabs* output, NSError* error)) handler;

/// Gets a list of templates for a specified account.
/// Retrieves the definition of the specified template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
///
/// @param DSESTemplatesApi_GetOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESEnvelopeTemplate*
-(NSURLSessionTask*) getWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    options:(DSESTemplatesApi_GetOptions*) options
    completionHandler: (void (^)(DSESEnvelopeTemplate* output, NSError* error)) handler;

/// Gets PDF documents from a template.
/// Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify `combined` to retrieve all documents in the template as one pdf.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
///
///
/// @param DSESTemplatesApi_GetDocumentOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return NSURL*
-(NSURLSessionTask*) getDocumentWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    options:(DSESTemplatesApi_GetDocumentOptions*) options
    completionHandler: (void (^)(NSURL* output, NSError* error)) handler;

/// Gets a page image from a template for display.
/// Retrieves a page image for display from the specified template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
/// @param pageNumber The page number being accessed.
///
///
/// @param DSESTemplatesApi_GetDocumentPageImageOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return NSURL*
-(NSURLSessionTask*) getDocumentPageImageWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    pageNumber:(NSString*) pageNumber 
    options:(DSESTemplatesApi_GetDocumentPageImageOptions*) options
    completionHandler: (void (^)(NSURL* output, NSError* error)) handler;

/// Returns tabs on the document.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
///
///
/// @param DSESTemplatesApi_GetDocumentTabsOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTabs*
-(NSURLSessionTask*) getDocumentTabsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    options:(DSESTemplatesApi_GetDocumentTabsOptions*) options
    completionHandler: (void (^)(DSESTabs* output, NSError* error)) handler;

/// Gets template lock information.
/// Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the `X-DocuSign-Edit` header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the `X-DocuSign-Edit` header.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESLockInformation*
-(NSURLSessionTask*) getLockWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    completionHandler: (void (^)(DSESLockInformation* output, NSError* error)) handler;

/// Gets template notification information.
/// Retrieves the envelope notification, reminders and expirations, information for an existing template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESNotification*
-(NSURLSessionTask*) getNotificationSettingsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    completionHandler: (void (^)(DSESNotification* output, NSError* error)) handler;

/// Returns tabs on the specified page.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
/// @param pageNumber The page number being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTabs*
-(NSURLSessionTask*) getPageTabsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    pageNumber:(NSString*) pageNumber 
    completionHandler: (void (^)(DSESTabs* output, NSError* error)) handler;

/// Returns document page image(s) based on input.
/// 
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
///
///
/// @param DSESTemplatesApi_GetPagesOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESPageImages*
-(NSURLSessionTask*) getPagesWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    options:(DSESTemplatesApi_GetPagesOptions*) options
    completionHandler: (void (^)(DSESPageImages* output, NSError* error)) handler;

/// Gets the bulk recipient file from a template.
/// Retrieves the bulk recipient file information from a template that has a bulk recipient.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param recipientId The ID of the recipient being accessed.
///
///
/// @param DSESTemplatesApi_ListBulkRecipientsOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBulkRecipientsResponse*
-(NSURLSessionTask*) listBulkRecipientsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    recipientId:(NSString*) recipientId 
    options:(DSESTemplatesApi_ListBulkRecipientsOptions*) options
    completionHandler: (void (^)(DSESBulkRecipientsResponse* output, NSError* error)) handler;

/// Gets the custom document fields from a template.
/// Retrieves the custom document field information from an existing template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESCustomFields*
-(NSURLSessionTask*) listCustomFieldsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    completionHandler: (void (^)(DSESCustomFields* output, NSError* error)) handler;

/// Gets the custom document fields for a an existing template document.
/// Retrieves the custom document fields for an existing template document.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
///
///
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDocumentFieldsInformation*
-(NSURLSessionTask*) listDocumentFieldsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    completionHandler: (void (^)(DSESDocumentFieldsInformation* output, NSError* error)) handler;

/// Gets a list of documents associated with a template.
/// Retrieves a list of documents associated with the specified template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
///
/// @param DSESTemplatesApi_ListDocumentsOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTemplateDocumentsResult*
-(NSURLSessionTask*) listDocumentsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    options:(DSESTemplatesApi_ListDocumentsOptions*) options
    completionHandler: (void (^)(DSESTemplateDocumentsResult* output, NSError* error)) handler;

/// Gets recipient information from a template.
/// Retrieves the information for all recipients in the specified template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
///
/// @param DSESTemplatesApi_ListRecipientsOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESRecipients*
-(NSURLSessionTask*) listRecipientsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    options:(DSESTemplatesApi_ListRecipientsOptions*) options
    completionHandler: (void (^)(DSESRecipients* output, NSError* error)) handler;

/// Gets the tabs information for a signer or sign-in-person recipient in a template.
/// Gets the tabs information for a signer or sign-in-person recipient in a template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param recipientId The ID of the recipient being accessed.
///
///
/// @param DSESTemplatesApi_ListTabsOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTabs*
-(NSURLSessionTask*) listTabsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    recipientId:(NSString*) recipientId 
    options:(DSESTemplatesApi_ListTabsOptions*) options
    completionHandler: (void (^)(DSESTabs* output, NSError* error)) handler;

/// Gets the definition of a template.
/// Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
///
/// @param accountId The external account number (int) or account ID Guid.
///
///
/// @param DSESTemplatesApi_ListTemplatesOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESEnvelopeTemplateResults*
-(NSURLSessionTask*) listTemplatesWithAccountId:
    (NSString*) accountId 
    options:(DSESTemplatesApi_ListTemplatesOptions*) options
    completionHandler: (void (^)(DSESEnvelopeTemplateResults* output, NSError* error)) handler;

/// Rotates page image from a template for display.
/// Rotates page image from a template for display. The page image can be rotated to the left or right.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
/// @param pageNumber The page number being accessed.
///
/// @param pageRequest  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return void
-(NSURLSessionTask*) rotateDocumentPageWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    pageNumber:(NSString*) pageNumber 
    pageRequest:(DSESPageRequest*) pageRequest
    completionHandler: (void (^)(NSError* error)) handler;

/// Updates an existing template.
/// Updates an existing template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param envelopeTemplate  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTemplateUpdateSummary*
-(NSURLSessionTask*) updateWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    envelopeTemplate:(DSESEnvelopeTemplate*) envelopeTemplate
    completionHandler: (void (^)(DSESTemplateUpdateSummary* output, NSError* error)) handler;

/// Adds or replaces the bulk recipients list in a template.
/// Updates the bulk recipients in a template using a file upload. The Content-Type supported for uploading a bulk recipient file is CSV (text/csv).  The REST API does not support modifying individual rows or values in the bulk recipients file. It only allows the entire file to be added or replaced with a new file.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param recipientId The ID of the recipient being accessed.
///
/// @param bulkRecipientsRequest  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESBulkRecipientsSummaryResponse*
-(NSURLSessionTask*) updateBulkRecipientsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    recipientId:(NSString*) recipientId 
    bulkRecipientsRequest:(DSESBulkRecipientsRequest*) bulkRecipientsRequest
    completionHandler: (void (^)(DSESBulkRecipientsSummaryResponse* output, NSError* error)) handler;

/// Updates envelope custom fields in a template.
/// Updates the custom fields in a template.  Each custom field used in a template must have a unique name.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param templateCustomFields  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESCustomFields*
-(NSURLSessionTask*) updateCustomFieldsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    templateCustomFields:(DSESTemplateCustomFields*) templateCustomFields
    completionHandler: (void (^)(DSESCustomFields* output, NSError* error)) handler;

/// Adds a document to a template document.
/// Adds the specified document to an existing template document.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
///
/// @param envelopeDefinition  
/// @param DSESTemplatesApi_UpdateDocumentOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESEnvelopeDocument*
-(NSURLSessionTask*) updateDocumentWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    envelopeDefinition:(DSESEnvelopeDefinition*) envelopeDefinition
    options:(DSESTemplatesApi_UpdateDocumentOptions*) options
    completionHandler: (void (^)(DSESEnvelopeDocument* output, NSError* error)) handler;

/// Updates existing custom document fields in an existing template document.
/// Updates existing custom document fields in an existing template document.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param documentId The ID of the document being accessed.
///
/// @param documentFieldsInformation  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESDocumentFieldsInformation*
-(NSURLSessionTask*) updateDocumentFieldsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    documentId:(NSString*) documentId 
    documentFieldsInformation:(DSESDocumentFieldsInformation*) documentFieldsInformation
    completionHandler: (void (^)(DSESDocumentFieldsInformation* output, NSError* error)) handler;

/// Adds documents to a template document.
/// Adds one or more documents to an existing template document.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param envelopeDefinition  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTemplateDocumentsResult*
-(NSURLSessionTask*) updateDocumentsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    envelopeDefinition:(DSESEnvelopeDefinition*) envelopeDefinition
    completionHandler: (void (^)(DSESTemplateDocumentsResult* output, NSError* error)) handler;

/// Shares a template with a group
/// Shares a template with the specified members group.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param templatePart Currently, the only defined part is **groups**.
///
/// @param groupInformation  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESGroupInformation*
-(NSURLSessionTask*) updateGroupShareWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    templatePart:(NSString*) templatePart 
    groupInformation:(DSESGroupInformation*) groupInformation
    completionHandler: (void (^)(DSESGroupInformation* output, NSError* error)) handler;

/// Updates a template lock.
/// Updates the lock duration time or update the `lockedByApp` property information for the specified template. The user and integrator key must match the user specified by the `lockByUser` property and integrator key information and the `X-DocuSign-Edit` header must be included or an error will be generated.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param lockRequest  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESLockInformation*
-(NSURLSessionTask*) updateLockWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    lockRequest:(DSESLockRequest*) lockRequest
    completionHandler: (void (^)(DSESLockInformation* output, NSError* error)) handler;

/// Updates the notification  structure for an existing template.
/// Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param templateNotificationRequest  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESNotification*
-(NSURLSessionTask*) updateNotificationSettingsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    templateNotificationRequest:(DSESTemplateNotificationRequest*) templateNotificationRequest
    completionHandler: (void (^)(DSESNotification* output, NSError* error)) handler;

/// Updates recipients in a template.
/// Updates recipients in a template.   You can edit the following properties: `email`, `userName`, `routingOrder`, `faxNumber`, `deliveryMethod`, `accessCode`, and `requireIdLookup`.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
///
/// @param templateRecipients  
/// @param DSESTemplatesApi_UpdateRecipientsOptions Options for modifying the request.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESRecipientsUpdateSummary*
-(NSURLSessionTask*) updateRecipientsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    templateRecipients:(DSESTemplateRecipients*) templateRecipients
    options:(DSESTemplatesApi_UpdateRecipientsOptions*) options
    completionHandler: (void (^)(DSESRecipientsUpdateSummary* output, NSError* error)) handler;

/// Updates the tabs for a recipient.
/// Updates one or more tabs for a recipient in a template.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param templateId The ID of the template being accessed.
/// @param recipientId The ID of the recipient being accessed.
///
/// @param templateTabs  
///
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
///
/// @return DSESTabs*
-(NSURLSessionTask*) updateTabsWithAccountId:
    (NSString*) accountId 
    templateId:(NSString*) templateId 
    recipientId:(NSString*) recipientId 
    templateTabs:(DSESTemplateTabs*) templateTabs
    completionHandler: (void (^)(DSESTabs* output, NSError* error)) handler;


@end
