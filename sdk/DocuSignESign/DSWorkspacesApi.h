#import <Foundation/Foundation.h>
#import "DSErrorDetails.h"
#import "DSPageImages.h"
#import "DSWorkspace.h"
#import "DSWorkspaceFolderContents.h"
#import "DSWorkspaceItem.h"
#import "DSWorkspaceItemList.h"
#import "DSWorkspaceList.h"
#import "DSApi.h"

/**
* DocuSign REST API
* The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
*
* OpenAPI spec version: v2
* Contact: devcenter@docusign.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/










@interface DSWorkspacesApi_GetWorkspaceFileOptions : DSObject
/*
 * isDownload When set to **true**, the Content-Disposition header is set in the response. The value of the header provides the filename of the file. Default is **false**.
 */
@property NSString* isDownload;
/*
 * pdfVersion When set to **true** the file returned as a PDF.
 */
@property NSString* pdfVersion;

@end



@interface DSWorkspacesApi_ListWorkspaceFilePagesOptions : DSObject
/*
 * count The maximum number of results to be returned by this request.
 */
@property NSString* count;
/*
 * dpi Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310.
 */
@property NSString* dpi;
/*
 * maxHeight Sets the maximum height (in pixels) of the returned image.
 */
@property NSString* maxHeight;
/*
 * maxWidth Sets the maximum width (in pixels) of the returned image.
 */
@property NSString* maxWidth;
/*
 * startPosition The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
 */
@property NSString* startPosition;

@end



@interface DSWorkspacesApi_ListWorkspaceFolderItemsOptions : DSObject
/*
 * count The maximum number of results to be returned by this request.
 */
@property NSString* count;
/*
 * includeFiles When set to **true**, file information is returned in the response along with folder information. The default is **false**.
 */
@property NSString* includeFiles;
/*
 * includeSubFolders When set to **true**, information about the sub-folders of the current folder is returned. The default is **false**.
 */
@property NSString* includeSubFolders;
/*
 * includeThumbnails When set to **true**, thumbnails are returned as part of the response.  The default is **false**.
 */
@property NSString* includeThumbnails;
/*
 * includeUserDetail Set to **true** to return extended details about the user. The default is **false**.
 */
@property NSString* includeUserDetail;
/*
 * startPosition The position within the total result set from which to start returning values.
 */
@property NSString* startPosition;
/*
 * workspaceUserId If set, then the results are filtered to those associated with the specified userId.
 */
@property NSString* workspaceUserId;

@end





@interface DSWorkspacesApi: NSObject <DSApi>

extern NSString* kDSWorkspacesApiErrorDomain;
extern NSInteger kDSWorkspacesApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Create a Workspace
/// Creates a new workspace.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param workspace  (optional)

///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSWorkspace*
-(NSNumber*) createWorkspaceWithAccountId:
(NSString*) accountId 
 workspace:(DSWorkspace*) workspace

 completionHandler: (void (^)(DSWorkspace* output, NSError* error)) handler;

/// Creates a workspace file.
///
/// @param accountId The external account number (int) or account ID Guid./// @param workspaceId Specifies the workspace ID GUID./// @param folderId The ID of the folder being accessed.


///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSWorkspaceItem*
-(NSNumber*) createWorkspaceFileWithAccountId:
(NSString*) accountId  workspaceId:(NSString*) workspaceId  folderId:(NSString*) folderId 


 completionHandler: (void (^)(DSWorkspaceItem* output, NSError* error)) handler;

/// Delete Workspace
/// Deletes an existing workspace (logically).
///
/// @param accountId The external account number (int) or account ID Guid./// @param workspaceId Specifies the workspace ID GUID.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSWorkspace*
-(NSNumber*) deleteWorkspaceWithAccountId:
(NSString*) accountId  workspaceId:(NSString*) workspaceId 


 completionHandler: (void (^)(DSWorkspace* output, NSError* error)) handler;

/// Deletes workspace one or more specific files/folders from the given folder or root.
///
/// @param accountId The external account number (int) or account ID Guid./// @param workspaceId Specifies the workspace ID GUID./// @param folderId The ID of the folder being accessed.
/// @param workspaceItemList  (optional)

///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) deleteWorkspaceFolderItemsWithAccountId:
(NSString*) accountId  workspaceId:(NSString*) workspaceId  folderId:(NSString*) folderId 
 workspaceItemList:(DSWorkspaceItemList*) workspaceItemList

 completionHandler: (void (^)(NSError* error)) handler;

/// Get Workspace
/// Retrives properties about a workspace given a unique workspaceId. 
///
/// @param accountId The external account number (int) or account ID Guid./// @param workspaceId Specifies the workspace ID GUID.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSWorkspace*
-(NSNumber*) getWorkspaceWithAccountId:
(NSString*) accountId  workspaceId:(NSString*) workspaceId 


 completionHandler: (void (^)(DSWorkspace* output, NSError* error)) handler;

/// Get Workspace File
/// Retrieves a workspace file (the binary).
///
/// @param accountId The external account number (int) or account ID Guid./// @param workspaceId Specifies the workspace ID GUID./// @param folderId The ID of the folder being accessed./// @param fileId Specifies the room file ID GUID.

/// @param DSWorkspacesApi_GetWorkspaceFileOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) getWorkspaceFileWithAccountId:
(NSString*) accountId  workspaceId:(NSString*) workspaceId  folderId:(NSString*) folderId  fileId:(NSString*) fileId 

 options:(DSWorkspacesApi_GetWorkspaceFileOptions*) options
 completionHandler: (void (^)(NSError* error)) handler;

/// List File Pages
/// Retrieves a workspace file as rasterized pages.
///
/// @param accountId The external account number (int) or account ID Guid./// @param workspaceId Specifies the workspace ID GUID./// @param folderId The ID of the folder being accessed./// @param fileId Specifies the room file ID GUID.

/// @param DSWorkspacesApi_ListWorkspaceFilePagesOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSPageImages*
-(NSNumber*) listWorkspaceFilePagesWithAccountId:
(NSString*) accountId  workspaceId:(NSString*) workspaceId  folderId:(NSString*) folderId  fileId:(NSString*) fileId 

 options:(DSWorkspacesApi_ListWorkspaceFilePagesOptions*) options
 completionHandler: (void (^)(DSPageImages* output, NSError* error)) handler;

/// List Workspace Folder Contents
/// Retrieves workspace folder contents, which can include sub folders and files.
///
/// @param accountId The external account number (int) or account ID Guid./// @param workspaceId Specifies the workspace ID GUID./// @param folderId The ID of the folder being accessed.

/// @param DSWorkspacesApi_ListWorkspaceFolderItemsOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSWorkspaceFolderContents*
-(NSNumber*) listWorkspaceFolderItemsWithAccountId:
(NSString*) accountId  workspaceId:(NSString*) workspaceId  folderId:(NSString*) folderId 

 options:(DSWorkspacesApi_ListWorkspaceFolderItemsOptions*) options
 completionHandler: (void (^)(DSWorkspaceFolderContents* output, NSError* error)) handler;

/// List Workspaces
/// Gets information about the Workspaces that have been created.
///
/// @param accountId The external account number (int) or account ID Guid.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSWorkspaceList*
-(NSNumber*) listWorkspacesWithAccountId:
(NSString*) accountId 


 completionHandler: (void (^)(DSWorkspaceList* output, NSError* error)) handler;

/// Update Workspace
/// Updates information about a specific workspace.
///
/// @param accountId The external account number (int) or account ID Guid./// @param workspaceId Specifies the workspace ID GUID.
/// @param workspace  (optional)

///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSWorkspace*
-(NSNumber*) updateWorkspaceWithAccountId:
(NSString*) accountId  workspaceId:(NSString*) workspaceId 
 workspace:(DSWorkspace*) workspace

 completionHandler: (void (^)(DSWorkspace* output, NSError* error)) handler;

/// Update Workspace File Metadata
/// Updates workspace item metadata for one or more specific files/folders.
///
/// @param accountId The external account number (int) or account ID Guid./// @param workspaceId Specifies the workspace ID GUID./// @param folderId The ID of the folder being accessed./// @param fileId Specifies the room file ID GUID.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSWorkspaceItem*
-(NSNumber*) updateWorkspaceFileWithAccountId:
(NSString*) accountId  workspaceId:(NSString*) workspaceId  folderId:(NSString*) folderId  fileId:(NSString*) fileId 


 completionHandler: (void (^)(DSWorkspaceItem* output, NSError* error)) handler;


@end
