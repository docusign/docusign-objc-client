#import <Foundation/Foundation.h>
#import "DSConnectConfigResults.h"
#import "DSConnectCustomConfiguration.h"
#import "DSConnectFailureFilter.h"
#import "DSConnectFailureResults.h"
#import "DSConnectLog.h"
#import "DSConnectLogs.h"
#import "DSErrorDetails.h"
#import "DSIntegratedUserInfoList.h"
#import "DSMobileNotifierConfigurationInformation.h"
#import "DSApi.h"

/**
* DocuSign REST API
* The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
*
* OpenAPI spec version: v2
* Contact: devcenter@docusign.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/












@interface DSConnectApi_GetEventLogOptions : DSObject
/*
 * additionalInfo When true, the connectDebugLog information is included in the response.
 */
@property NSString* additionalInfo;

@end




@interface DSConnectApi_ListEventFailureLogsOptions : DSObject
/*
 * fromDate 
 */
@property NSString* fromDate;
/*
 * toDate 
 */
@property NSString* toDate;

@end



@interface DSConnectApi_ListEventLogsOptions : DSObject
/*
 * fromDate 
 */
@property NSString* fromDate;
/*
 * toDate 
 */
@property NSString* toDate;

@end




@interface DSConnectApi_ListUsersOptions : DSObject
/*
 * count 
 */
@property NSString* count;
/*
 * emailSubstring 
 */
@property NSString* emailSubstring;
/*
 * listIncludedUsers 
 */
@property NSString* listIncludedUsers;
/*
 * startPosition 
 */
@property NSString* startPosition;
/*
 * status 
 */
@property NSString* status;
/*
 * userNameSubstring 
 */
@property NSString* userNameSubstring;

@end






@interface DSConnectApi: NSObject <DSApi>

extern NSString* kDSConnectApiErrorDomain;
extern NSInteger kDSConnectApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Creates a connect configuration for the specified account.
/// Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param connectCustomConfiguration  (optional)

///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSConnectCustomConfiguration*
-(NSNumber*) createConfigurationWithAccountId:
(NSString*) accountId 
 connectCustomConfiguration:(DSConnectCustomConfiguration*) connectCustomConfiguration

 completionHandler: (void (^)(DSConnectCustomConfiguration* output, NSError* error)) handler;

/// Deletes the specified connect configuration.
/// Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
///
/// @param accountId The external account number (int) or account ID Guid./// @param connectId The ID of the custom Connect configuration being accessed.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) deleteConfigurationWithAccountId:
(NSString*) accountId  connectId:(NSString*) connectId 


 completionHandler: (void (^)(NSError* error)) handler;

/// Deletes a Connect failure log entry.
/// Deletes the Connect failure log information for the specified entry.
///
/// @param accountId The external account number (int) or account ID Guid./// @param failureId The ID of the failed connect log entry.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) deleteEventFailureLogWithAccountId:
(NSString*) accountId  failureId:(NSString*) failureId 


 completionHandler: (void (^)(NSError* error)) handler;

/// Deletes a specified Connect log entry.
/// Deletes a specified entry from the Connect Log. 
///
/// @param accountId The external account number (int) or account ID Guid./// @param logId The ID of the connect log entry


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) deleteEventLogWithAccountId:
(NSString*) accountId  logId:(NSString*) logId 


 completionHandler: (void (^)(NSError* error)) handler;

/// Gets a list of Connect log entries.
/// Retrieves a list of connect log entries for your account.  ###### Note: The `enableLog` property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
///
/// @param accountId The external account number (int) or account ID Guid.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
-(NSNumber*) deleteEventLogsWithAccountId:
(NSString*) accountId 


 completionHandler: (void (^)(NSError* error)) handler;

/// Reserved
/// Reserved:
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param mobileNotifierConfigurationInformation  (optional)

///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSMobileNotifierConfigurationInformation*
-(NSNumber*) deleteMobileNotifiersWithAccountId:
(NSString*) accountId 
 mobileNotifierConfigurationInformation:(DSMobileNotifierConfigurationInformation*) mobileNotifierConfigurationInformation

 completionHandler: (void (^)(DSMobileNotifierConfigurationInformation* output, NSError* error)) handler;

/// Get a Connect Configuration Information
/// Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
///
/// @param accountId The external account number (int) or account ID Guid./// @param connectId The ID of the custom Connect configuration being accessed.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSConnectConfigResults*
-(NSNumber*) getConfigurationWithAccountId:
(NSString*) accountId  connectId:(NSString*) connectId 


 completionHandler: (void (^)(DSConnectConfigResults* output, NSError* error)) handler;

/// Get the specified Connect log entry.
/// Retrieves the specified Connect log entry for your account.  ###### Note: The `enableLog` setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
///
/// @param accountId The external account number (int) or account ID Guid./// @param logId The ID of the connect log entry

/// @param DSConnectApi_GetEventLogOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSConnectLog*
-(NSNumber*) getEventLogWithAccountId:
(NSString*) accountId  logId:(NSString*) logId 

 options:(DSConnectApi_GetEventLogOptions*) options
 completionHandler: (void (^)(DSConnectLog* output, NSError* error)) handler;

/// Get Connect Configuration Information
/// Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
///
/// @param accountId The external account number (int) or account ID Guid.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSConnectConfigResults*
-(NSNumber*) listConfigurationsWithAccountId:
(NSString*) accountId 


 completionHandler: (void (^)(DSConnectConfigResults* output, NSError* error)) handler;

/// Gets the Connect failure log information.
/// Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
///
/// @param accountId The external account number (int) or account ID Guid.

/// @param DSConnectApi_ListEventFailureLogsOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSConnectLogs*
-(NSNumber*) listEventFailureLogsWithAccountId:
(NSString*) accountId 

 options:(DSConnectApi_ListEventFailureLogsOptions*) options
 completionHandler: (void (^)(DSConnectLogs* output, NSError* error)) handler;

/// Gets the Connect log.
/// Retrieves a list of connect log entries for your account.  ###### Note: The `enableLog` setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
///
/// @param accountId The external account number (int) or account ID Guid.

/// @param DSConnectApi_ListEventLogsOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSConnectLogs*
-(NSNumber*) listEventLogsWithAccountId:
(NSString*) accountId 

 options:(DSConnectApi_ListEventLogsOptions*) options
 completionHandler: (void (^)(DSConnectLogs* output, NSError* error)) handler;

/// Reserved
/// Reserved:
///
/// @param accountId The external account number (int) or account ID Guid.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSMobileNotifierConfigurationInformation*
-(NSNumber*) listMobileNotifiersWithAccountId:
(NSString*) accountId 


 completionHandler: (void (^)(DSMobileNotifierConfigurationInformation* output, NSError* error)) handler;

/// Returns users from the configured Connect service.
/// Returns users from the configured Connect service.
///
/// @param accountId The external account number (int) or account ID Guid./// @param connectId The ID of the custom Connect configuration being accessed.

/// @param DSConnectApi_ListUsersOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSIntegratedUserInfoList*
-(NSNumber*) listUsersWithAccountId:
(NSString*) accountId  connectId:(NSString*) connectId 

 options:(DSConnectApi_ListUsersOptions*) options
 completionHandler: (void (^)(DSIntegratedUserInfoList* output, NSError* error)) handler;

/// Republishes Connect information for the specified envelope.
/// Republishes Connect information for the specified envelope.
///
/// @param accountId The external account number (int) or account ID Guid./// @param envelopeId The envelopeId Guid of the envelope being accessed.


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSConnectFailureResults*
-(NSNumber*) retryEventForEnvelopeWithAccountId:
(NSString*) accountId  envelopeId:(NSString*) envelopeId 


 completionHandler: (void (^)(DSConnectFailureResults* output, NSError* error)) handler;

/// Republishes Connect information for multiple envelopes.
/// Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param connectFailureFilter  (optional)

///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSConnectFailureResults*
-(NSNumber*) retryEventForEnvelopesWithAccountId:
(NSString*) accountId 
 connectFailureFilter:(DSConnectFailureFilter*) connectFailureFilter

 completionHandler: (void (^)(DSConnectFailureResults* output, NSError* error)) handler;

/// Updates a specified Connect configuration.
/// Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param connectCustomConfiguration  (optional)

///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSConnectCustomConfiguration*
-(NSNumber*) updateConfigurationWithAccountId:
(NSString*) accountId 
 connectCustomConfiguration:(DSConnectCustomConfiguration*) connectCustomConfiguration

 completionHandler: (void (^)(DSConnectCustomConfiguration* output, NSError* error)) handler;

/// Reserved
/// Reserved:
///
/// @param accountId The external account number (int) or account ID Guid.
/// @param mobileNotifierConfigurationInformation  (optional)

///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSMobileNotifierConfigurationInformation*
-(NSNumber*) updateMobileNotifiersWithAccountId:
(NSString*) accountId 
 mobileNotifierConfigurationInformation:(DSMobileNotifierConfigurationInformation*) mobileNotifierConfigurationInformation

 completionHandler: (void (^)(DSMobileNotifierConfigurationInformation* output, NSError* error)) handler;


@end
