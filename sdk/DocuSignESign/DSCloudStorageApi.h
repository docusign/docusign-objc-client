#import <Foundation/Foundation.h>
#import "DSCloudStorageProviders.h"
#import "DSErrorDetails.h"
#import "DSExternalFolder.h"
#import "DSApi.h"

/**
* DocuSign REST API
* The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
*
* OpenAPI spec version: v2
* Contact: devcenter@docusign.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/








@interface DSCloudStorageApi_GetProviderOptions : DSObject
/*
 * redirectUrl  The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.  
 */
@property NSString* redirectUrl;

@end



@interface DSCloudStorageApi_ListOptions : DSObject
/*
 * cloudStorageFolderPath 
 */
@property NSString* cloudStorageFolderPath;
/*
 * count An optional value that sets how many items are included in the response.   The default setting for this is 25. 
 */
@property NSString* count;
/*
 * order An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order 
 */
@property NSString* order;
/*
 * orderBy An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name  
 */
@property NSString* orderBy;
/*
 * searchText 
 */
@property NSString* searchText;
/*
 * startPosition Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.  
 */
@property NSString* startPosition;

@end



@interface DSCloudStorageApi_ListFoldersOptions : DSObject
/*
 * cloudStorageFolderPath A comma separated list of folder IDs included in the request. 
 */
@property NSString* cloudStorageFolderPath;
/*
 * count An optional value that sets how many items are included in the response.   The default setting for this is 25. 
 */
@property NSString* count;
/*
 * order An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order 
 */
@property NSString* order;
/*
 * orderBy An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name  
 */
@property NSString* orderBy;
/*
 * searchText 
 */
@property NSString* searchText;
/*
 * startPosition Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.  
 */
@property NSString* startPosition;

@end



@interface DSCloudStorageApi_ListProvidersOptions : DSObject
/*
 * redirectUrl  The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.  
 */
@property NSString* redirectUrl;

@end


@interface DSCloudStorageApi: NSObject <DSApi>

extern NSString* kDSCloudStorageApiErrorDomain;
extern NSInteger kDSCloudStorageApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Configures the redirect URL information  for one or more cloud storage providers for the specified user.
/// Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
///
/// @param accountId The external account number (int) or account ID Guid./// @param userId The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
/// @param cloudStorageProviders  (optional)

///  code:201 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSCloudStorageProviders*
-(NSNumber*) createProviderWithAccountId:
(NSString*) accountId  userId:(NSString*) userId 
 cloudStorageProviders:(DSCloudStorageProviders*) cloudStorageProviders

 completionHandler: (void (^)(DSCloudStorageProviders* output, NSError* error)) handler;

/// Deletes the user authentication information for the specified cloud storage provider.
/// Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
///
/// @param accountId The external account number (int) or account ID Guid./// @param userId The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing./// @param serviceId The ID of the service to access.   Valid values are the service name (\"Box\") or the numerical serviceId (\"4136\").


///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSCloudStorageProviders*
-(NSNumber*) deleteProviderWithAccountId:
(NSString*) accountId  userId:(NSString*) userId  serviceId:(NSString*) serviceId 


 completionHandler: (void (^)(DSCloudStorageProviders* output, NSError* error)) handler;

/// Deletes the user authentication information for one or more cloud storage providers.
/// Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
///
/// @param accountId The external account number (int) or account ID Guid./// @param userId The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
/// @param cloudStorageProviders  (optional)

///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSCloudStorageProviders*
-(NSNumber*) deleteProvidersWithAccountId:
(NSString*) accountId  userId:(NSString*) userId 
 cloudStorageProviders:(DSCloudStorageProviders*) cloudStorageProviders

 completionHandler: (void (^)(DSCloudStorageProviders* output, NSError* error)) handler;

/// Gets the specified Cloud Storage Provider configuration for the User.
/// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
///
/// @param accountId The external account number (int) or account ID Guid./// @param userId The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing./// @param serviceId The ID of the service to access.   Valid values are the service name (\"Box\") or the numerical serviceId (\"4136\").

/// @param DSCloudStorageApi_GetProviderOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSCloudStorageProviders*
-(NSNumber*) getProviderWithAccountId:
(NSString*) accountId  userId:(NSString*) userId  serviceId:(NSString*) serviceId 

 options:(DSCloudStorageApi_GetProviderOptions*) options
 completionHandler: (void (^)(DSCloudStorageProviders* output, NSError* error)) handler;

/// Gets a list of all the items from the specified cloud storage provider.
/// Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
///
/// @param accountId The external account number (int) or account ID Guid./// @param userId The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing./// @param serviceId The ID of the service to access.   Valid values are the service name (\"Box\") or the numerical serviceId (\"4136\")./// @param folderId The ID of the folder being accessed.

/// @param DSCloudStorageApi_ListOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSExternalFolder*
-(NSNumber*) listWithAccountId:
(NSString*) accountId  userId:(NSString*) userId  serviceId:(NSString*) serviceId  folderId:(NSString*) folderId 

 options:(DSCloudStorageApi_ListOptions*) options
 completionHandler: (void (^)(DSExternalFolder* output, NSError* error)) handler;

/// Retrieves a list of all the items in a specified folder from the specified cloud storage provider.
/// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
///
/// @param accountId The external account number (int) or account ID Guid./// @param userId The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing./// @param serviceId The ID of the service to access.   Valid values are the service name (\"Box\") or the numerical serviceId (\"4136\").

/// @param DSCloudStorageApi_ListFoldersOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSExternalFolder*
-(NSNumber*) listFoldersWithAccountId:
(NSString*) accountId  userId:(NSString*) userId  serviceId:(NSString*) serviceId 

 options:(DSCloudStorageApi_ListFoldersOptions*) options
 completionHandler: (void (^)(DSExternalFolder* output, NSError* error)) handler;

/// Get the Cloud Storage Provider configuration for the specified user.
/// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.  The {serviceId} parameter can be either the service name or serviceId.
///
/// @param accountId The external account number (int) or account ID Guid./// @param userId The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.

/// @param DSCloudStorageApi_ListProvidersOptions Options for modifying the behavior of the function.
///  code:200 message:"Successful response.",
///  code:400 message:"Error encountered."
/// @return DSCloudStorageProviders*
-(NSNumber*) listProvidersWithAccountId:
(NSString*) accountId  userId:(NSString*) userId 

 options:(DSCloudStorageApi_ListProvidersOptions*) options
 completionHandler: (void (^)(DSCloudStorageProviders* output, NSError* error)) handler;


@end
